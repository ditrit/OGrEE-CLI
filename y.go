// Code generated by goyacc - DO NOT EDIT.

package main

import __yyfmt__ "fmt"

import (
	cmd "cli/controllers"
	"os"
	"strconv"
	"strings"
)

var root node

//Since the CFG will only execute rules
//when production is fully met.
//We need to catch values of array as they are coming,
//otherwise, only the last elt will be captured.
//The best way here is to catch array of strings
//then return array of maps
func retNodeArray(input []interface{}) []map[int]interface{} {
	res := []map[int]interface{}{}
	for idx := range input {
		switch input[idx].(type) {
		case string:
			if input[idx].(string) == "false" {
				x := map[int]interface{}{0: &boolNode{BOOL, false}}
				res = append(res, x)
			}
			if input[idx].(string) == "true" {
				x := map[int]interface{}{0: &boolNode{BOOL, true}}
				res = append(res, x)
			} else {
				x := map[int]interface{}{0: &strNode{STR, input[idx].(string)}}
				res = append(res, x)
			}
		case int:
			x := map[int]interface{}{0: &numNode{NUM, input[idx].(int)}}
			res = append(res, x)

		default: //Most likely a node
			res = append(res, map[int]interface{}{0: input[idx]})
		}
		/*if input[idx].(string) == "false" {
		         x := map[int]interface{}{0: &boolNode{BOOL, false}}
		         res = append(res, x)
		  } else if input[idx].(string) == "true" {
		         x := map[int]interface{}{0: &boolNode{BOOL, true}}
		         res = append(res, x)
		  } else if v,e := strconv.Atoi(input[idx].(string)); e == nil {
		         x := map[int]interface{}{0: &numNode{NUM, v}}
		         res = append(res, x)
		  } else {
		         x := map[int]interface{}{0: &strNode{STR, input[idx].(string)}}
		         res = append(res, x)
		  }*/
	}
	return res
}

func resMap(x *string, ent string, isUpdate bool) map[string]interface{} {
	resarr := strings.Split(*x, "=")
	res := make(map[string]interface{})
	attrs := make(map[string]string)

	for i := 0; i+1 < len(resarr); {
		if isUpdate == true {
			res[resarr[i]] = resarr[i+1]
		} else if i+1 < len(resarr) {
			switch ent {
			case "sensor", "group":
				switch resarr[i] {
				case "id", "name", "category", "parentID",
					"description", "domain", "type",
					"parentid", "parentId":
					res[resarr[i]] = resarr[i+1]

				default:
					attrs[resarr[i]] = resarr[i+1]
				}
			case "room_template":
				switch resarr[i] {
				case "id", "slug", "orientation", "separators",
					"tiles", "colors", "aisles", "sizeWDHm",
					"technicalArea", "reservedArea":
					res[resarr[i]] = resarr[i+1]

				default:
					attrs[resarr[i]] = resarr[i+1]
				}
			case "obj_template":
				switch resarr[i] {
				case "id", "slug", "description", "category",
					"slots", "colors", "components", "sizeWDHmm",
					"fbxModel":
					res[resarr[i]] = resarr[i+1]

				default:
					attrs[resarr[i]] = resarr[i+1]
				}

			default:
				switch resarr[i] {
				case "id", "name", "category", "parentID",
					"description", "domain", "parentid", "parentId":
					res[resarr[i]] = resarr[i+1]

				default:
					attrs[resarr[i]] = resarr[i+1]
				}

			}
		}
		i += 2
	}
	if len(attrs) > 0 {
		res["attributes"] = attrs
	}

	return res
}

func replaceOCLICurrPath(x string) string {
	return strings.Replace(x, "_/", cmd.State.CurrPath+"/", 1)
}

func auxGetNode(path string) string {
	stk := cmd.StrToStack(path)
	nd := cmd.FindNodeInTree(&cmd.State.TreeHierarchy, stk)
	if nd != nil {
		return cmd.EntityToString((*nd).Entity)
	} else {
		println("Error while finding object in path")
	}
	return ""
}

func resolveReference(ref string) string {
	/*Probably code to reference SymbolTable and return data*/
	idx := dynamicMap[ref]
	item := dynamicSymbolTable[idx]
	switch item.(type) {
	case bool:
		dCatchNodePtr = &boolNode{BOOL, item.(bool)}
		if item.(bool) == false {
			return "false"
		} else {
			return "true"
		}
	case string:
		dCatchNodePtr = &strNode{STR, item.(string)}
		return item.(string)
	case int:
		dCatchNodePtr = &numNode{NUM, item.(int)}
		return strconv.Itoa(item.(int))
	/*case map[string]interface{}:
	  //dCatchNodePtr=&symbolReferenceNode{REFERENCE, }
	  return item.(map[string]interface{})[subIdx].(string)*/
	case *commonNode:
		dCatchNodePtr = item
		args := ""
		for i := range item.(*commonNode).args {
			args += item.(*commonNode).args[i].(string)
		}
		return item.(*commonNode).val + " " + args
	default:
		println("Unable to deref your variable ")
		return ""
	}
}

func formActualPath(x string) string {
	if x == "" || x == "." {
		return cmd.State.CurrPath
	} else if string(x[0]) == "/" {
		return x

	} else {
		return cmd.State.CurrPath + "/" + x
	}
}

type yySymType struct {
	yys     int
	n       int
	s       string
	sarr    []string
	ast     *ast
	node    node
	nodeArr []node
	elifArr []elifNode
	arr     []interface{}
	mapArr  []map[int]interface{}
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault      = 57449
	yyEofCode      = 57344
	TOK_AC         = 57357
	TOK_AISLE      = 57360
	TOK_AND        = 57426
	TOK_APOST      = 57446
	TOK_ATTRSPEC   = 57403
	TOK_BLDG       = 57350
	TOK_BOOL       = 57367
	TOK_CABINET    = 57358
	TOK_CD         = 57378
	TOK_CLR        = 57380
	TOK_CMDFLAG    = 57374
	TOK_CMDS       = 57412
	TOK_COL        = 57406
	TOK_COMMA      = 57410
	TOK_CORIDOR    = 57354
	TOK_CREATE     = 57368
	TOK_DELETE     = 57371
	TOK_DEREF      = 57415
	TOK_DEVICE     = 57353
	TOK_DIV        = 57431
	TOK_DO         = 57441
	TOK_DOC        = 57377
	TOK_DONE       = 57437
	TOK_DOT        = 57411
	TOK_ELIF       = 57440
	TOK_ELSE       = 57420
	TOK_EQUAL      = 57373
	TOK_EXIT       = 57376
	TOK_FI         = 57436
	TOK_FOR        = 57418
	TOK_GET        = 57369
	TOK_GREATER    = 57433
	TOK_GREP       = 57381
	TOK_GROUP      = 57355
	TOK_IF         = 57417
	TOK_IN         = 57427
	TOK_LBLOCK     = 57421
	TOK_LBRAC      = 57408
	TOK_LEN        = 57442
	TOK_LESS       = 57434
	TOK_LPAREN     = 57423
	TOK_LS         = 57382
	TOK_LSAC       = 57392
	TOK_LSAISLE    = 57388
	TOK_LSBLDG     = 57387
	TOK_LSCAB      = 57390
	TOK_LSCORRIDOR = 57395
	TOK_LSDEV      = 57398
	TOK_LSOG       = 57384
	TOK_LSPANEL    = 57393
	TOK_LSRACK     = 57397
	TOK_LSROOM     = 57396
	TOK_LSSENSOR   = 57391
	TOK_LSSITE     = 57386
	TOK_LSTEN      = 57385
	TOK_LSTILE     = 57389
	TOK_LSWALL     = 57394
	TOK_MOD        = 57438
	TOK_MULT       = 57432
	TOK_NOT        = 57430
	TOK_NUM        = 57346
	TOK_OBJ_TMPL   = 57364
	TOK_OCBLDG     = 57399
	TOK_OCCORIDOR  = 57445
	TOK_OCDEL      = 57366
	TOK_OCDEV      = 57400
	TOK_OCGROUP    = 57443
	TOK_OCRACK     = 57401
	TOK_OCROOM     = 57402
	TOK_OCSITE     = 57404
	TOK_OCTENANT   = 57405
	TOK_OCWALL     = 57444
	TOK_OR         = 57425
	TOK_PANEL      = 57359
	TOK_PARTIAL    = 57448
	TOK_PLUS       = 57365
	TOK_PRNT       = 57428
	TOK_PWD        = 57379
	TOK_QUOT       = 57429
	TOK_RACK       = 57352
	TOK_RBLOCK     = 57422
	TOK_RBRAC      = 57409
	TOK_ROOM       = 57351
	TOK_ROOM_TMPL  = 57363
	TOK_RPAREN     = 57424
	TOK_SEARCH     = 57372
	TOK_SELECT     = 57407
	TOK_SEMICOL    = 57416
	TOK_SENSOR     = 57362
	TOK_SITE       = 57349
	TOK_SLASH      = 57375
	TOK_TEMPLATE   = 57413
	TOK_TENANT     = 57348
	TOK_THEN       = 57435
	TOK_TILE       = 57361
	TOK_TREE       = 57383
	TOK_UNSET      = 57439
	TOK_UPDATE     = 57370
	TOK_USE_JSON   = 57447
	TOK_VAR        = 57414
	TOK_WALL       = 57356
	TOK_WHILE      = 57419
	TOK_WORD       = 57347
	yyErrCode      = 57345

	yyMaxDepth = 200
	yyTabOfs   = -354
)

var (
	yyPrec = map[int]int{
		TOK_MULT:  0,
		TOK_OCDEL: 0,
		TOK_DIV:   0,
		TOK_PLUS:  0,
		TOK_EQUAL: 1,
	}

	yyXLAT = map[int]int{
		57437: 0,   // TOK_DONE (404x)
		57409: 1,   // TOK_RBRAC (400x)
		57424: 2,   // TOK_RPAREN (400x)
		57420: 3,   // TOK_ELSE (398x)
		57416: 4,   // TOK_SEMICOL (397x)
		57440: 5,   // TOK_ELIF (396x)
		57436: 6,   // TOK_FI (396x)
		57347: 7,   // TOK_WORD (335x)
		57366: 8,   // TOK_OCDEL (327x)
		57415: 9,   // TOK_DEREF (300x)
		57344: 10,  // $end (296x)
		57411: 11,  // TOK_DOT (223x)
		57406: 12,  // TOK_COL (216x)
		57375: 13,  // TOK_SLASH (215x)
		57346: 14,  // TOK_NUM (207x)
		57365: 15,  // TOK_PLUS (200x)
		57367: 16,  // TOK_BOOL (191x)
		57403: 17,  // TOK_ATTRSPEC (176x)
		57430: 18,  // TOK_NOT (168x)
		57373: 19,  // TOK_EQUAL (162x)
		57429: 20,  // TOK_QUOT (160x)
		57425: 21,  // TOK_OR (154x)
		57423: 22,  // TOK_LPAREN (148x)
		57422: 23,  // TOK_RBLOCK (144x)
		57442: 24,  // TOK_LEN (141x)
		57426: 25,  // TOK_AND (138x)
		57410: 26,  // TOK_COMMA (132x)
		57433: 27,  // TOK_GREATER (127x)
		57434: 28,  // TOK_LESS (127x)
		57438: 29,  // TOK_MOD (126x)
		57432: 30,  // TOK_MULT (126x)
		57378: 31,  // TOK_CD (124x)
		57382: 32,  // TOK_LS (124x)
		57387: 33,  // TOK_LSBLDG (124x)
		57398: 34,  // TOK_LSDEV (124x)
		57384: 35,  // TOK_LSOG (124x)
		57397: 36,  // TOK_LSRACK (124x)
		57396: 37,  // TOK_LSROOM (124x)
		57386: 38,  // TOK_LSSITE (124x)
		57385: 39,  // TOK_LSTEN (124x)
		57428: 40,  // TOK_PRNT (124x)
		57379: 41,  // TOK_PWD (124x)
		57383: 42,  // TOK_TREE (124x)
		57439: 43,  // TOK_UNSET (124x)
		57380: 44,  // TOK_CLR (123x)
		57368: 45,  // TOK_CREATE (123x)
		57371: 46,  // TOK_DELETE (123x)
		57377: 47,  // TOK_DOC (123x)
		57376: 48,  // TOK_EXIT (123x)
		57369: 49,  // TOK_GET (123x)
		57381: 50,  // TOK_GREP (123x)
		57392: 51,  // TOK_LSAC (123x)
		57388: 52,  // TOK_LSAISLE (123x)
		57390: 53,  // TOK_LSCAB (123x)
		57395: 54,  // TOK_LSCORRIDOR (123x)
		57393: 55,  // TOK_LSPANEL (123x)
		57391: 56,  // TOK_LSSENSOR (123x)
		57389: 57,  // TOK_LSTILE (123x)
		57394: 58,  // TOK_LSWALL (123x)
		57370: 59,  // TOK_UPDATE (123x)
		57407: 60,  // TOK_SELECT (122x)
		57418: 61,  // TOK_FOR (120x)
		57417: 62,  // TOK_IF (120x)
		57419: 63,  // TOK_WHILE (120x)
		57421: 64,  // TOK_LBLOCK (114x)
		57357: 65,  // TOK_AC (112x)
		57360: 66,  // TOK_AISLE (112x)
		57350: 67,  // TOK_BLDG (112x)
		57358: 68,  // TOK_CABINET (112x)
		57354: 69,  // TOK_CORIDOR (112x)
		57353: 70,  // TOK_DEVICE (112x)
		57355: 71,  // TOK_GROUP (112x)
		57364: 72,  // TOK_OBJ_TMPL (112x)
		57359: 73,  // TOK_PANEL (112x)
		57352: 74,  // TOK_RACK (112x)
		57351: 75,  // TOK_ROOM (112x)
		57363: 76,  // TOK_ROOM_TMPL (112x)
		57362: 77,  // TOK_SENSOR (112x)
		57349: 78,  // TOK_SITE (112x)
		57348: 79,  // TOK_TENANT (112x)
		57361: 80,  // TOK_TILE (112x)
		57356: 81,  // TOK_WALL (112x)
		57412: 82,  // TOK_CMDS (110x)
		57408: 83,  // TOK_LBRAC (110x)
		57441: 84,  // TOK_DO (109x)
		57399: 85,  // TOK_OCBLDG (109x)
		57445: 86,  // TOK_OCCORIDOR (109x)
		57400: 87,  // TOK_OCDEV (109x)
		57443: 88,  // TOK_OCGROUP (109x)
		57401: 89,  // TOK_OCRACK (109x)
		57402: 90,  // TOK_OCROOM (109x)
		57404: 91,  // TOK_OCSITE (109x)
		57405: 92,  // TOK_OCTENANT (109x)
		57444: 93,  // TOK_OCWALL (109x)
		57413: 94,  // TOK_TEMPLATE (109x)
		57435: 95,  // TOK_THEN (109x)
		57414: 96,  // TOK_VAR (109x)
		57427: 97,  // TOK_IN (108x)
		57446: 98,  // TOK_APOST (107x)
		57374: 99,  // TOK_CMDFLAG (107x)
		57372: 100, // TOK_SEARCH (107x)
		57479: 101, // P1 (91x)
		57478: 102, // P (88x)
		57447: 103, // TOK_USE_JSON (45x)
		57484: 104, // WORDORNUM (43x)
		57485: 105, // factor (34x)
		57491: 106, // unary (32x)
		57490: 107, // term (27x)
		57486: 108, // nex (25x)
		57481: 109, // REL (21x)
		57456: 110, // EQAL (19x)
		57431: 111, // TOK_DIV (19x)
		57461: 112, // JOIN (18x)
		57457: 113, // EXPR (17x)
		57451: 114, // BASH (16x)
		57480: 115, // Q (16x)
		57462: 116, // K (15x)
		57465: 117, // NT_CREATE (15x)
		57466: 118, // NT_DEL (15x)
		57467: 119, // NT_GET (15x)
		57468: 120, // NT_UPDATE (15x)
		57469: 121, // OCCHOOSE (14x)
		57471: 122, // OCDEL (14x)
		57473: 123, // OCGET (14x)
		57475: 124, // OCSEL (14x)
		57476: 125, // OCUPDATE (14x)
		57459: 126, // FUNC (13x)
		57472: 127, // OCDOT (13x)
		57474: 128, // OCLISYNTX (13x)
		57489: 129, // stmnt (13x)
		57453: 130, // CTRL (12x)
		57477: 131, // OPEN_STMT (12x)
		57487: 132, // st2 (12x)
		57458: 133, // F (6x)
		57450: 134, // ANYTOKEN (4x)
		57482: 135, // STRARG (4x)
		57452: 136, // CDORFG (3x)
		57454: 137, // E (3x)
		57455: 138, // EIF (2x)
		57460: 139, // GETOBJS (2x)
		57463: 140, // NODEACC (2x)
		57464: 141, // NODEGETTER (2x)
		57470: 142, // OCCR (2x)
		57483: 143, // WNARG (2x)
		57488: 144, // start (1x)
		57448: 145, // TOK_PARTIAL (1x)
		57449: 146, // $default (0x)
		57345: 147, // error (0x)
	}

	yySymNames = []string{
		"TOK_DONE",
		"TOK_RBRAC",
		"TOK_RPAREN",
		"TOK_ELSE",
		"TOK_SEMICOL",
		"TOK_ELIF",
		"TOK_FI",
		"TOK_WORD",
		"TOK_OCDEL",
		"TOK_DEREF",
		"$end",
		"TOK_DOT",
		"TOK_COL",
		"TOK_SLASH",
		"TOK_NUM",
		"TOK_PLUS",
		"TOK_BOOL",
		"TOK_ATTRSPEC",
		"TOK_NOT",
		"TOK_EQUAL",
		"TOK_QUOT",
		"TOK_OR",
		"TOK_LPAREN",
		"TOK_RBLOCK",
		"TOK_LEN",
		"TOK_AND",
		"TOK_COMMA",
		"TOK_GREATER",
		"TOK_LESS",
		"TOK_MOD",
		"TOK_MULT",
		"TOK_CD",
		"TOK_LS",
		"TOK_LSBLDG",
		"TOK_LSDEV",
		"TOK_LSOG",
		"TOK_LSRACK",
		"TOK_LSROOM",
		"TOK_LSSITE",
		"TOK_LSTEN",
		"TOK_PRNT",
		"TOK_PWD",
		"TOK_TREE",
		"TOK_UNSET",
		"TOK_CLR",
		"TOK_CREATE",
		"TOK_DELETE",
		"TOK_DOC",
		"TOK_EXIT",
		"TOK_GET",
		"TOK_GREP",
		"TOK_LSAC",
		"TOK_LSAISLE",
		"TOK_LSCAB",
		"TOK_LSCORRIDOR",
		"TOK_LSPANEL",
		"TOK_LSSENSOR",
		"TOK_LSTILE",
		"TOK_LSWALL",
		"TOK_UPDATE",
		"TOK_SELECT",
		"TOK_FOR",
		"TOK_IF",
		"TOK_WHILE",
		"TOK_LBLOCK",
		"TOK_AC",
		"TOK_AISLE",
		"TOK_BLDG",
		"TOK_CABINET",
		"TOK_CORIDOR",
		"TOK_DEVICE",
		"TOK_GROUP",
		"TOK_OBJ_TMPL",
		"TOK_PANEL",
		"TOK_RACK",
		"TOK_ROOM",
		"TOK_ROOM_TMPL",
		"TOK_SENSOR",
		"TOK_SITE",
		"TOK_TENANT",
		"TOK_TILE",
		"TOK_WALL",
		"TOK_CMDS",
		"TOK_LBRAC",
		"TOK_DO",
		"TOK_OCBLDG",
		"TOK_OCCORIDOR",
		"TOK_OCDEV",
		"TOK_OCGROUP",
		"TOK_OCRACK",
		"TOK_OCROOM",
		"TOK_OCSITE",
		"TOK_OCTENANT",
		"TOK_OCWALL",
		"TOK_TEMPLATE",
		"TOK_THEN",
		"TOK_VAR",
		"TOK_IN",
		"TOK_APOST",
		"TOK_CMDFLAG",
		"TOK_SEARCH",
		"P1",
		"P",
		"TOK_USE_JSON",
		"WORDORNUM",
		"factor",
		"unary",
		"term",
		"nex",
		"REL",
		"EQAL",
		"TOK_DIV",
		"JOIN",
		"EXPR",
		"BASH",
		"Q",
		"K",
		"NT_CREATE",
		"NT_DEL",
		"NT_GET",
		"NT_UPDATE",
		"OCCHOOSE",
		"OCDEL",
		"OCGET",
		"OCSEL",
		"OCUPDATE",
		"FUNC",
		"OCDOT",
		"OCLISYNTX",
		"stmnt",
		"CTRL",
		"OPEN_STMT",
		"st2",
		"F",
		"ANYTOKEN",
		"STRARG",
		"CDORFG",
		"E",
		"EIF",
		"GETOBJS",
		"NODEACC",
		"NODEGETTER",
		"OCCR",
		"WNARG",
		"start",
		"TOK_PARTIAL",
		"$default",
		"error",
	}

	yyTokenLiteralStrings = map[int]string{}

	yyReductions = map[int]struct{ xsym, components int }{
		0:   {0, 1},
		1:   {144, 1},
		2:   {132, 1},
		3:   {132, 3},
		4:   {132, 1},
		5:   {129, 1},
		6:   {129, 1},
		7:   {129, 1},
		8:   {129, 1},
		9:   {129, 0},
		10:  {130, 1},
		11:  {131, 7},
		12:  {131, 10},
		13:  {131, 6},
		14:  {131, 15},
		15:  {131, 7},
		16:  {131, 12},
		17:  {131, 10},
		18:  {131, 10},
		19:  {138, 7},
		20:  {138, 0},
		21:  {113, 3},
		22:  {113, 1},
		23:  {112, 3},
		24:  {112, 1},
		25:  {110, 4},
		26:  {110, 4},
		27:  {110, 1},
		28:  {109, 3},
		29:  {109, 4},
		30:  {109, 4},
		31:  {109, 3},
		32:  {109, 1},
		33:  {108, 3},
		34:  {108, 3},
		35:  {108, 1},
		36:  {107, 3},
		37:  {107, 3},
		38:  {107, 3},
		39:  {107, 1},
		40:  {106, 2},
		41:  {106, 2},
		42:  {106, 1},
		43:  {105, 3},
		44:  {105, 1},
		45:  {105, 2},
		46:  {105, 5},
		47:  {105, 4},
		48:  {105, 1},
		49:  {105, 3},
		50:  {105, 1},
		51:  {116, 1},
		52:  {116, 1},
		53:  {116, 1},
		54:  {116, 1},
		55:  {117, 5},
		56:  {117, 5},
		57:  {119, 2},
		58:  {119, 3},
		59:  {120, 4},
		60:  {120, 6},
		61:  {120, 7},
		62:  {118, 2},
		63:  {137, 1},
		64:  {137, 1},
		65:  {137, 1},
		66:  {137, 1},
		67:  {137, 1},
		68:  {137, 1},
		69:  {137, 1},
		70:  {137, 1},
		71:  {137, 1},
		72:  {137, 1},
		73:  {137, 1},
		74:  {137, 1},
		75:  {137, 1},
		76:  {137, 1},
		77:  {137, 1},
		78:  {137, 1},
		79:  {137, 1},
		80:  {104, 1},
		81:  {104, 1},
		82:  {104, 4},
		83:  {104, 4},
		84:  {104, 4},
		85:  {104, 4},
		86:  {104, 1},
		87:  {104, 2},
		88:  {133, 4},
		89:  {133, 3},
		90:  {133, 6},
		91:  {133, 5},
		92:  {133, 3},
		93:  {133, 4},
		94:  {102, 1},
		95:  {102, 2},
		96:  {101, 3},
		97:  {101, 1},
		98:  {101, 4},
		99:  {101, 3},
		100: {101, 2},
		101: {101, 1},
		102: {101, 2},
		103: {101, 0},
		104: {115, 2},
		105: {115, 2},
		106: {115, 2},
		107: {115, 2},
		108: {115, 2},
		109: {115, 2},
		110: {115, 2},
		111: {115, 2},
		112: {115, 2},
		113: {115, 2},
		114: {115, 2},
		115: {115, 2},
		116: {115, 2},
		117: {115, 2},
		118: {115, 2},
		119: {115, 2},
		120: {115, 2},
		121: {115, 3},
		122: {115, 4},
		123: {115, 6},
		124: {115, 1},
		125: {114, 1},
		126: {114, 1},
		127: {114, 4},
		128: {114, 1},
		129: {114, 1},
		130: {114, 1},
		131: {114, 1},
		132: {114, 2},
		133: {114, 2},
		134: {114, 2},
		135: {114, 2},
		136: {114, 2},
		137: {114, 2},
		138: {114, 2},
		139: {114, 2},
		140: {114, 2},
		141: {114, 2},
		142: {114, 2},
		143: {114, 2},
		144: {114, 2},
		145: {114, 2},
		146: {114, 2},
		147: {114, 2},
		148: {114, 2},
		149: {114, 2},
		150: {114, 2},
		151: {114, 2},
		152: {114, 2},
		153: {114, 2},
		154: {114, 2},
		155: {114, 2},
		156: {114, 3},
		157: {114, 3},
		158: {114, 3},
		159: {114, 2},
		160: {114, 2},
		161: {128, 2},
		162: {128, 1},
		163: {128, 1},
		164: {128, 1},
		165: {128, 1},
		166: {128, 1},
		167: {128, 1},
		168: {142, 5},
		169: {142, 5},
		170: {142, 5},
		171: {142, 5},
		172: {142, 7},
		173: {142, 7},
		174: {142, 7},
		175: {142, 7},
		176: {142, 7},
		177: {142, 7},
		178: {142, 7},
		179: {142, 7},
		180: {142, 11},
		181: {142, 11},
		182: {142, 6},
		183: {142, 6},
		184: {142, 9},
		185: {142, 9},
		186: {142, 5},
		187: {142, 5},
		188: {142, 5},
		189: {142, 5},
		190: {142, 5},
		191: {142, 5},
		192: {142, 5},
		193: {142, 5},
		194: {142, 5},
		195: {142, 5},
		196: {142, 5},
		197: {142, 5},
		198: {142, 5},
		199: {142, 5},
		200: {142, 5},
		201: {142, 5},
		202: {142, 5},
		203: {142, 5},
		204: {142, 5},
		205: {142, 5},
		206: {142, 5},
		207: {142, 5},
		208: {142, 5},
		209: {142, 5},
		210: {142, 5},
		211: {142, 5},
		212: {122, 2},
		213: {125, 5},
		214: {123, 2},
		215: {139, 3},
		216: {139, 1},
		217: {121, 4},
		218: {127, 8},
		219: {127, 9},
		220: {127, 9},
		221: {127, 10},
		222: {127, 9},
		223: {127, 9},
		224: {127, 9},
		225: {127, 9},
		226: {127, 9},
		227: {127, 6},
		228: {127, 4},
		229: {127, 4},
		230: {127, 6},
		231: {127, 6},
		232: {127, 2},
		233: {127, 5},
		234: {127, 7},
		235: {127, 8},
		236: {127, 4},
		237: {124, 1},
		238: {124, 5},
		239: {135, 2},
		240: {135, 2},
		241: {135, 0},
		242: {143, 3},
		243: {143, 1},
		244: {126, 6},
		245: {126, 1},
		246: {141, 2},
		247: {141, 0},
		248: {140, 1},
		249: {140, 1},
		250: {140, 4},
		251: {140, 4},
		252: {140, 4},
		253: {140, 4},
		254: {140, 1},
		255: {140, 2},
		256: {140, 5},
		257: {136, 3},
		258: {136, 0},
		259: {134, 1},
		260: {134, 1},
		261: {134, 1},
		262: {134, 1},
		263: {134, 1},
		264: {134, 1},
		265: {134, 1},
		266: {134, 1},
		267: {134, 1},
		268: {134, 1},
		269: {134, 1},
		270: {134, 1},
		271: {134, 1},
		272: {134, 1},
		273: {134, 1},
		274: {134, 1},
		275: {134, 1},
		276: {134, 1},
		277: {134, 1},
		278: {134, 1},
		279: {134, 1},
		280: {134, 1},
		281: {134, 1},
		282: {134, 1},
		283: {134, 1},
		284: {134, 1},
		285: {134, 1},
		286: {134, 1},
		287: {134, 1},
		288: {134, 1},
		289: {134, 1},
		290: {134, 1},
		291: {134, 1},
		292: {134, 1},
		293: {134, 1},
		294: {134, 1},
		295: {134, 1},
		296: {134, 1},
		297: {134, 1},
		298: {134, 1},
		299: {134, 1},
		300: {134, 1},
		301: {134, 1},
		302: {134, 1},
		303: {134, 1},
		304: {134, 1},
		305: {134, 1},
		306: {134, 1},
		307: {134, 1},
		308: {134, 1},
		309: {134, 1},
		310: {134, 1},
		311: {134, 1},
		312: {134, 1},
		313: {134, 1},
		314: {134, 1},
		315: {134, 1},
		316: {134, 1},
		317: {134, 1},
		318: {134, 1},
		319: {134, 1},
		320: {134, 1},
		321: {134, 1},
		322: {134, 1},
		323: {134, 1},
		324: {134, 1},
		325: {134, 1},
		326: {134, 1},
		327: {134, 1},
		328: {134, 1},
		329: {134, 1},
		330: {134, 1},
		331: {134, 1},
		332: {134, 1},
		333: {134, 1},
		334: {134, 1},
		335: {134, 1},
		336: {134, 1},
		337: {134, 1},
		338: {134, 1},
		339: {134, 1},
		340: {134, 1},
		341: {134, 1},
		342: {134, 1},
		343: {134, 1},
		344: {134, 1},
		345: {134, 1},
		346: {134, 1},
		347: {134, 1},
		348: {134, 1},
		349: {134, 1},
		350: {134, 1},
		351: {134, 1},
		352: {134, 1},
		353: {134, 1},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [739][]uint16{
		// 0
		{4: 345, 7: 377, 379, 380, 345, 378, 251, 376, 15: 407, 19: 415, 31: 381, 382, 385, 388, 403, 387, 386, 384, 383, 402, 404, 397, 398, 400, 371, 374, 406, 405, 372, 401, 391, 389, 394, 395, 392, 396, 390, 393, 373, 416, 366, 364, 365, 101: 375, 414, 114: 399, 360, 359, 367, 370, 368, 369, 411, 408, 410, 413, 409, 362, 412, 361, 357, 358, 363, 356, 144: 355},
		{10: 354},
		{10: 353},
		{352, 352, 3: 352, 1091, 352, 352, 10: 352},
		{350, 350, 3: 350, 5: 350, 350, 10: 350},
		// 5
		{349, 349, 349, 349, 349, 349, 349, 10: 349},
		{348, 348, 348, 348, 348, 348, 348, 10: 348},
		{347, 347, 347, 347, 347, 347, 347, 10: 347},
		{346, 346, 346, 346, 346, 346, 346, 10: 346},
		{344, 344, 3: 344, 5: 344, 344, 10: 344},
		// 10
		{64: 1074},
		{22: 1069},
		{7: 1029, 22: 1028},
		{303, 303, 303, 303, 303, 303, 303, 10: 303},
		{302, 302, 302, 302, 302, 302, 302, 10: 302},
		// 15
		{301, 301, 301, 301, 301, 301, 301, 10: 301},
		{300, 300, 300, 300, 300, 300, 300, 10: 300},
		{65: 994, 997, 990, 996, 1001, 993, 1002, 1003, 995, 992, 991, 1004, 1000, 989, 988, 998, 999, 137: 1021},
		{251, 251, 251, 251, 251, 251, 251, 592, 594, 595, 251, 593, 13: 376, 65: 994, 997, 990, 996, 1001, 993, 1002, 1003, 995, 992, 991, 1004, 1000, 989, 988, 998, 999, 101: 375, 1018, 137: 1019},
		{7: 592, 594, 595, 11: 593, 251, 376, 101: 375, 982},
		// 20
		{251, 251, 251, 251, 251, 251, 251, 592, 594, 595, 251, 593, 13: 376, 101: 375, 981},
		{260, 260, 260, 260, 260, 260, 260, 10: 260, 12: 260, 14: 260, 17: 260, 26: 260},
		{251, 251, 251, 251, 251, 251, 251, 592, 594, 595, 251, 593, 251, 14: 251, 17: 251, 26: 251, 101: 980},
		{109, 109, 109, 109, 109, 109, 109, 10: 109, 608, 257, 607, 22: 975},
		{11: 604, 82: 937, 94: 938, 96: 936},
		// 25
		{251, 251, 251, 251, 251, 251, 251, 592, 594, 595, 251, 593, 253, 376, 101: 375, 935},
		{7: 924},
		{251, 251, 251, 251, 251, 251, 251, 592, 594, 595, 251, 593, 13: 376, 101: 375, 923},
		{251, 251, 251, 251, 251, 251, 251, 592, 594, 595, 251, 593, 13: 376, 101: 375, 922},
		{251, 251, 251, 251, 251, 251, 251, 592, 594, 595, 251, 593, 13: 376, 101: 375, 921},
		// 30
		{251, 251, 251, 251, 251, 251, 251, 592, 594, 595, 251, 593, 13: 376, 101: 375, 920},
		{251, 251, 251, 251, 251, 251, 251, 592, 594, 595, 251, 593, 13: 376, 101: 375, 919},
		{251, 251, 251, 251, 251, 251, 251, 592, 594, 595, 251, 593, 13: 376, 101: 375, 918},
		{251, 251, 251, 251, 251, 251, 251, 592, 594, 595, 251, 593, 13: 376, 101: 375, 917},
		{251, 251, 251, 251, 251, 251, 251, 592, 594, 595, 251, 593, 13: 376, 101: 375, 916},
		// 35
		{251, 251, 251, 251, 251, 251, 251, 592, 594, 595, 251, 593, 13: 376, 101: 375, 915},
		{251, 251, 251, 251, 251, 251, 251, 592, 594, 595, 251, 593, 13: 376, 101: 375, 914},
		{251, 251, 251, 251, 251, 251, 251, 592, 594, 595, 251, 593, 13: 376, 101: 375, 913},
		{251, 251, 251, 251, 251, 251, 251, 592, 594, 595, 251, 593, 13: 376, 101: 375, 912},
		{251, 251, 251, 251, 251, 251, 251, 592, 594, 595, 251, 593, 13: 376, 101: 375, 911},
		// 40
		{251, 251, 251, 251, 251, 251, 251, 592, 594, 595, 251, 593, 13: 376, 101: 375, 910},
		{251, 251, 251, 251, 251, 251, 251, 592, 594, 595, 251, 593, 13: 376, 101: 375, 909},
		{251, 251, 251, 251, 251, 251, 251, 592, 594, 595, 251, 593, 13: 376, 101: 375, 908},
		{251, 251, 251, 251, 251, 251, 251, 592, 594, 595, 251, 593, 13: 376, 251, 101: 375, 906},
		{8: 898, 899},
		// 45
		{230, 230, 230, 230, 230, 230, 230, 10: 230},
		{229, 229, 229, 229, 229, 229, 229, 10: 229},
		{228, 228, 228, 228, 228, 228, 228, 10: 228},
		{20: 873},
		{226, 226, 226, 226, 226, 226, 226, 10: 226},
		// 50
		{225, 225, 225, 225, 225, 225, 225, 10: 225},
		{224, 224, 224, 224, 224, 224, 224, 10: 224},
		{223, 223, 223, 223, 223, 223, 223, 851, 866, 10: 223, 867, 15: 868, 19: 869, 31: 846, 843, 862, 865, 859, 864, 863, 861, 860, 845, 844, 852, 856, 45: 847, 850, 49: 848, 59: 849, 857, 855, 853, 854, 82: 858},
		{65: 634, 637, 621, 636, 629, 627, 631, 640, 635, 625, 623, 641, 639, 619, 617, 638, 633, 85: 620, 628, 626, 630, 624, 622, 618, 616, 632, 142: 615},
		{192, 192, 192, 192, 192, 192, 192, 10: 192},
		// 55
		{191, 191, 191, 191, 191, 191, 191, 10: 191},
		{190, 190, 190, 190, 190, 190, 190, 10: 190},
		{189, 189, 189, 189, 189, 189, 189, 10: 189},
		{188, 188, 188, 188, 188, 188, 188, 10: 188},
		{187, 187, 187, 187, 187, 187, 187, 10: 187},
		// 60
		{12: 611},
		{251, 251, 251, 251, 251, 251, 251, 592, 594, 595, 251, 593, 13: 376, 83: 597, 101: 375, 596},
		{117, 117, 117, 117, 117, 117, 117, 10: 117, 417},
		{7: 418},
		{19: 419},
		// 65
		{7: 434, 428, 432, 14: 431, 16: 436, 18: 427, 20: 435, 22: 430, 24: 433, 105: 429, 426, 425, 424, 423, 422, 112: 421, 420},
		{116, 116, 116, 116, 116, 116, 116, 10: 116, 21: 559},
		{332, 332, 332, 332, 332, 332, 332, 10: 332, 21: 332, 23: 332, 25: 562},
		{330, 330, 330, 330, 330, 330, 330, 10: 330, 18: 565, 564, 21: 330, 23: 330, 25: 330},
		{327, 327, 327, 327, 327, 327, 327, 10: 327, 18: 327, 327, 21: 327, 23: 327, 25: 327},
		// 70
		{322, 322, 322, 322, 322, 322, 322, 8: 583, 10: 322, 15: 582, 18: 322, 322, 21: 322, 23: 322, 25: 322, 27: 581, 580},
		{319, 319, 319, 319, 319, 319, 319, 8: 319, 10: 319, 15: 319, 18: 319, 319, 21: 319, 23: 319, 25: 319, 27: 319, 319, 576, 574, 111: 575},
		{315, 315, 315, 315, 315, 315, 315, 8: 315, 10: 315, 15: 315, 18: 315, 315, 21: 315, 23: 315, 25: 315, 27: 315, 315, 315, 315, 111: 315},
		{7: 434, 428, 432, 14: 431, 16: 436, 18: 427, 20: 435, 22: 430, 24: 433, 105: 429, 573},
		{7: 434, 428, 432, 14: 431, 16: 436, 18: 427, 20: 435, 22: 430, 24: 433, 105: 429, 572},
		// 75
		{312, 312, 312, 312, 312, 312, 312, 8: 312, 10: 312, 15: 312, 18: 312, 312, 21: 312, 23: 312, 25: 312, 27: 312, 312, 312, 312, 111: 312},
		{7: 434, 428, 432, 14: 431, 16: 436, 18: 427, 20: 435, 22: 430, 24: 433, 105: 429, 426, 425, 424, 423, 422, 112: 421, 570},
		{310, 310, 310, 310, 310, 310, 310, 8: 310, 10: 310, 15: 310, 18: 310, 310, 21: 310, 23: 310, 25: 310, 310, 310, 310, 310, 310, 111: 310},
		{7: 556},
		{22: 553},
		// 80
		{306, 306, 306, 306, 306, 306, 306, 8: 306, 10: 306, 15: 306, 18: 306, 306, 21: 306, 23: 306, 25: 306, 306, 306, 306, 306, 306, 111: 306},
		{530, 504, 519, 515, 511, 533, 529, 438, 441, 443, 11: 506, 501, 470, 439, 440, 442, 498, 524, 468, 113, 520, 518, 517, 535, 521, 505, 526, 527, 531, 525, 473, 477, 482, 493, 479, 492, 490, 481, 480, 523, 474, 478, 532, 475, 463, 466, 472, 471, 464, 476, 486, 487, 484, 491, 488, 485, 483, 489, 465, 502, 513, 512, 514, 516, 455, 458, 448, 456, 452, 451, 453, 462, 457, 450, 449, 461, 460, 447, 446, 459, 454, 507, 503, 534, 494, 538, 495, 536, 496, 497, 499, 500, 537, 508, 528, 509, 522, 510, 469, 467, 104: 444, 134: 445, 437},
		{304, 304, 304, 304, 304, 304, 304, 8: 304, 10: 304, 15: 304, 18: 304, 304, 21: 304, 23: 304, 25: 304, 304, 304, 304, 304, 304, 111: 304},
		{20: 552},
		{},
		// 85
		{273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273},
		{78, 78, 78, 78, 78, 78, 78, 547, 78, 78, 11: 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78},
		{77, 77, 77, 77, 77, 77, 77, 542, 77, 77, 11: 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77},
		{},
		{7: 541},
		// 90
		{530, 504, 519, 515, 511, 533, 529, 438, 441, 443, 11: 506, 501, 470, 439, 440, 442, 498, 524, 468, 113, 520, 518, 517, 535, 521, 505, 526, 527, 531, 525, 473, 477, 482, 493, 479, 492, 490, 481, 480, 523, 474, 478, 532, 475, 463, 466, 472, 471, 464, 476, 486, 487, 484, 491, 488, 485, 483, 489, 465, 502, 513, 512, 514, 516, 455, 458, 448, 456, 452, 451, 453, 462, 457, 450, 449, 461, 460, 447, 446, 459, 454, 507, 503, 534, 494, 538, 495, 536, 496, 497, 499, 500, 537, 508, 528, 509, 522, 510, 469, 467, 104: 444, 134: 445, 540},
		{530, 504, 519, 515, 511, 533, 529, 438, 441, 443, 11: 506, 501, 470, 439, 440, 442, 498, 524, 468, 113, 520, 518, 517, 535, 521, 505, 526, 527, 531, 525, 473, 477, 482, 493, 479, 492, 490, 481, 480, 523, 474, 478, 532, 475, 463, 466, 472, 471, 464, 476, 486, 487, 484, 491, 488, 485, 483, 489, 465, 502, 513, 512, 514, 516, 455, 458, 448, 456, 452, 451, 453, 462, 457, 450, 449, 461, 460, 447, 446, 459, 454, 507, 503, 534, 494, 538, 495, 536, 496, 497, 499, 500, 537, 508, 528, 509, 522, 510, 469, 467, 104: 444, 134: 445, 539},
		{95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 11: 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95},
		{94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 11: 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94},
		{93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 11: 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93},
		// 95
		{92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 11: 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92},
		{91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 11: 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91},
		{90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 11: 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90},
		{89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 11: 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89},
		{88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 11: 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88},
		// 100
		{87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 11: 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87},
		{86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 11: 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86},
		{85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 11: 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85},
		{84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 11: 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84},
		{83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 11: 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83},
		// 105
		{82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 11: 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82},
		{81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 11: 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81},
		{80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 11: 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80},
		{79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 11: 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79},
		{76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 11: 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76},
		// 110
		{75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 11: 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75},
		{74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 11: 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74},
		{73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 11: 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73},
		{72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 11: 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72},
		{71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 11: 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71},
		// 115
		{70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 11: 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70},
		{69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 11: 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69},
		{68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 11: 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68},
		{67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 11: 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67},
		{66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 11: 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66},
		// 120
		{65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 11: 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65},
		{64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 11: 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64},
		{63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 11: 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63},
		{62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 11: 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62},
		{61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 11: 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61},
		// 125
		{60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 11: 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60},
		{59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 11: 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59},
		{58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 11: 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58},
		{57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 11: 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57},
		{56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 11: 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56},
		// 130
		{55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 11: 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55},
		{54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 11: 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54},
		{53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 11: 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53},
		{52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 11: 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52},
		{51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 11: 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51},
		// 135
		{50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 11: 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50},
		{49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 11: 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49},
		{48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 11: 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48},
		{47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 11: 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47},
		{46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 11: 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46},
		// 140
		{45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 11: 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45},
		{44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 11: 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44},
		{43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 11: 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43},
		{42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 11: 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42},
		{41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 11: 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41},
		// 145
		{40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 11: 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40},
		{39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 11: 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39},
		{38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 11: 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38},
		{37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 11: 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37},
		{36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 11: 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36},
		// 150
		{35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 11: 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35},
		{34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 11: 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34},
		{33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 11: 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33},
		{32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 11: 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32},
		{31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 11: 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31},
		// 155
		{30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 11: 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30},
		{29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 11: 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29},
		{28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 11: 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28},
		{27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 11: 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27},
		{26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 11: 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26},
		// 160
		{25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 11: 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25},
		{24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 11: 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24},
		{23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 11: 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23},
		{22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 11: 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22},
		{21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 11: 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21},
		// 165
		{20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 11: 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20},
		{19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 11: 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19},
		{18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 11: 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18},
		{17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 11: 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17},
		{16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 11: 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16},
		// 170
		{15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 11: 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15},
		{14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 11: 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14},
		{13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 11: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13},
		{12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 11: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12},
		{11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11: 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11},
		// 175
		{10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11: 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10},
		{9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 11: 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9},
		{8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 11: 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8},
		{7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 11: 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7},
		{6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 11: 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6},
		// 180
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 11: 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5},
		{4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 11: 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4},
		{3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 11: 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3},
		{2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 11: 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 11: 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		// 185
		{20: 114},
		{20: 115},
		{},
		{8: 543, 15: 544},
		{7: 546},
		// 190
		{7: 545},
		{},
		{},
		{8: 549, 15: 548},
		{7: 551},
		// 195
		{7: 550},
		{},
		{272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272},
		{305, 305, 305, 305, 305, 305, 305, 8: 305, 10: 305, 15: 305, 18: 305, 305, 21: 305, 23: 305, 25: 305, 305, 305, 305, 305, 305, 111: 305},
		{7: 554},
		// 200
		{2: 555},
		{307, 307, 307, 307, 307, 307, 307, 8: 307, 10: 307, 15: 307, 18: 307, 307, 21: 307, 23: 307, 25: 307, 307, 307, 307, 307, 307, 111: 307},
		{309, 309, 309, 309, 309, 309, 309, 8: 309, 10: 309, 15: 309, 18: 309, 309, 21: 309, 23: 309, 25: 309, 309, 309, 309, 309, 309, 64: 557, 111: 309},
		{7: 434, 428, 432, 14: 431, 16: 436, 18: 427, 20: 435, 22: 430, 24: 433, 105: 429, 426, 425, 424, 423, 422, 112: 421, 558},
		{21: 559, 23: 560},
		// 205
		{7: 434, 428, 432, 14: 431, 16: 436, 18: 427, 20: 435, 22: 430, 24: 433, 105: 429, 426, 425, 424, 423, 422, 112: 561},
		{308, 308, 308, 308, 308, 308, 308, 8: 308, 10: 308, 15: 308, 18: 308, 308, 21: 308, 23: 308, 25: 308, 308, 308, 308, 308, 308, 111: 308},
		{333, 333, 333, 333, 333, 333, 333, 10: 333, 21: 333, 23: 333, 25: 562},
		{7: 434, 428, 432, 14: 431, 16: 436, 18: 427, 20: 435, 22: 430, 24: 433, 105: 429, 426, 425, 424, 423, 563},
		{331, 331, 331, 331, 331, 331, 331, 10: 331, 18: 565, 564, 21: 331, 23: 331, 25: 331},
		// 210
		{19: 568},
		{19: 566},
		{7: 434, 428, 432, 14: 431, 16: 436, 18: 427, 20: 435, 22: 430, 24: 433, 105: 429, 426, 425, 424, 567},
		{328, 328, 328, 328, 328, 328, 328, 10: 328, 18: 328, 328, 21: 328, 23: 328, 25: 328},
		{7: 434, 428, 432, 14: 431, 16: 436, 18: 427, 20: 435, 22: 430, 24: 433, 105: 429, 426, 425, 424, 569},
		// 215
		{329, 329, 329, 329, 329, 329, 329, 10: 329, 18: 329, 329, 21: 329, 23: 329, 25: 329},
		{2: 571, 21: 559},
		{311, 311, 311, 311, 311, 311, 311, 8: 311, 10: 311, 15: 311, 18: 311, 311, 21: 311, 23: 311, 25: 311, 311, 311, 311, 311, 311, 111: 311},
		{313, 313, 313, 313, 313, 313, 313, 8: 313, 10: 313, 15: 313, 18: 313, 313, 21: 313, 23: 313, 25: 313, 27: 313, 313, 313, 313, 111: 313},
		{314, 314, 314, 314, 314, 314, 314, 8: 314, 10: 314, 15: 314, 18: 314, 314, 21: 314, 23: 314, 25: 314, 27: 314, 314, 314, 314, 111: 314},
		// 220
		{7: 434, 428, 432, 14: 431, 16: 436, 18: 427, 20: 435, 22: 430, 24: 433, 105: 429, 579},
		{7: 434, 428, 432, 14: 431, 16: 436, 18: 427, 20: 435, 22: 430, 24: 433, 105: 429, 578},
		{7: 434, 428, 432, 14: 431, 16: 436, 18: 427, 20: 435, 22: 430, 24: 433, 105: 429, 577},
		{316, 316, 316, 316, 316, 316, 316, 8: 316, 10: 316, 15: 316, 18: 316, 316, 21: 316, 23: 316, 25: 316, 27: 316, 316, 316, 316, 111: 316},
		{317, 317, 317, 317, 317, 317, 317, 8: 317, 10: 317, 15: 317, 18: 317, 317, 21: 317, 23: 317, 25: 317, 27: 317, 317, 317, 317, 111: 317},
		// 225
		{318, 318, 318, 318, 318, 318, 318, 8: 318, 10: 318, 15: 318, 18: 318, 318, 21: 318, 23: 318, 25: 318, 27: 318, 318, 318, 318, 111: 318},
		{7: 434, 428, 432, 14: 431, 16: 436, 18: 427, 590, 435, 22: 430, 24: 433, 105: 429, 426, 425, 589},
		{7: 434, 428, 432, 14: 431, 16: 436, 18: 427, 586, 435, 22: 430, 24: 433, 105: 429, 426, 425, 587},
		{7: 434, 428, 432, 14: 431, 16: 436, 18: 427, 20: 435, 22: 430, 24: 433, 105: 429, 426, 585},
		{7: 434, 428, 432, 14: 431, 16: 436, 18: 427, 20: 435, 22: 430, 24: 433, 105: 429, 426, 584},
		// 230
		{320, 320, 320, 320, 320, 320, 320, 8: 320, 10: 320, 15: 320, 18: 320, 320, 21: 320, 23: 320, 25: 320, 27: 320, 320, 576, 574, 111: 575},
		{321, 321, 321, 321, 321, 321, 321, 8: 321, 10: 321, 15: 321, 18: 321, 321, 21: 321, 23: 321, 25: 321, 27: 321, 321, 576, 574, 111: 575},
		{7: 434, 428, 432, 14: 431, 16: 436, 18: 427, 20: 435, 22: 430, 24: 433, 105: 429, 426, 425, 588},
		{323, 323, 323, 323, 323, 323, 323, 8: 583, 10: 323, 15: 582, 18: 323, 323, 21: 323, 23: 323, 25: 323},
		{324, 324, 324, 324, 324, 324, 324, 8: 583, 10: 324, 15: 582, 18: 324, 324, 21: 324, 23: 324, 25: 324},
		// 235
		{326, 326, 326, 326, 326, 326, 326, 8: 583, 10: 326, 15: 582, 18: 326, 326, 21: 326, 23: 326, 25: 326},
		{7: 434, 428, 432, 14: 431, 16: 436, 18: 427, 20: 435, 22: 430, 24: 433, 105: 429, 426, 425, 591},
		{325, 325, 325, 325, 325, 325, 325, 8: 583, 10: 325, 15: 582, 18: 325, 325, 21: 325, 23: 325, 25: 325},
		{257, 257, 257, 257, 257, 257, 257, 10: 257, 608, 257, 607, 257, 17: 257, 26: 257},
		{11: 604},
		// 240
		{253, 253, 253, 253, 253, 253, 253, 10: 253, 12: 253, 14: 253, 17: 253, 26: 253},
		{7: 603},
		{140, 140, 140, 140, 140, 140, 140, 10: 140},
		{1: 251, 7: 592, 594, 595, 11: 593, 13: 376, 26: 251, 101: 375, 598, 139: 599},
		{1: 138, 26: 601},
		// 245
		{1: 600},
		{137, 137, 137, 137, 137, 137, 137, 10: 137},
		{1: 251, 7: 592, 594, 595, 11: 593, 13: 376, 26: 251, 101: 375, 598, 139: 602},
		{1: 139},
		{252, 252, 252, 252, 252, 252, 252, 10: 252, 12: 252, 14: 252, 17: 252, 26: 252},
		// 250
		{254, 254, 254, 254, 254, 254, 254, 10: 254, 12: 254, 605, 254, 17: 254, 26: 254},
		{251, 251, 251, 251, 251, 251, 251, 592, 594, 595, 251, 593, 251, 14: 251, 17: 251, 26: 251, 101: 606},
		{256, 256, 256, 256, 256, 256, 256, 10: 256, 12: 256, 14: 256, 17: 256, 26: 256},
		{251, 251, 251, 251, 251, 251, 251, 592, 594, 595, 251, 593, 251, 14: 251, 17: 251, 26: 251, 101: 610},
		{7: 609},
		// 255
		{255, 255, 255, 255, 255, 255, 255, 10: 255, 12: 255, 14: 255, 17: 255, 26: 255},
		{258, 258, 258, 258, 258, 258, 258, 10: 258, 12: 258, 14: 258, 17: 258, 26: 258},
		{7: 612},
		{19: 613},
		{7: 434, 428, 432, 14: 431, 16: 436, 18: 427, 20: 435, 22: 430, 24: 433, 105: 429, 426, 425, 424, 423, 422, 112: 421, 614},
		// 260
		{141, 141, 141, 141, 141, 141, 141, 10: 141, 21: 559},
		{193, 193, 193, 193, 193, 193, 193, 10: 193},
		{12: 836},
		{12: 829},
		{12: 822},
		// 265
		{12: 815},
		{12: 806},
		{12: 797},
		{12: 788},
		{12: 779},
		// 270
		{12: 770},
		{12: 761},
		{12: 752},
		{12: 743},
		{12: 730},
		// 275
		{12: 717},
		{12: 709},
		{12: 698},
		{12: 687},
		{12: 674},
		// 280
		{12: 670},
		{12: 666},
		{12: 662},
		{12: 658},
		{12: 654},
		// 285
		{12: 650},
		{12: 646},
		{12: 642},
		{103: 643},
		{12: 644},
		// 290
		{251, 251, 251, 251, 251, 251, 251, 592, 594, 595, 251, 593, 13: 376, 101: 375, 645},
		{143, 143, 143, 143, 143, 143, 143, 10: 143},
		{103: 647},
		{12: 648},
		{251, 251, 251, 251, 251, 251, 251, 592, 594, 595, 251, 593, 13: 376, 101: 375, 649},
		// 295
		{144, 144, 144, 144, 144, 144, 144, 10: 144},
		{103: 651},
		{12: 652},
		{251, 251, 251, 251, 251, 251, 251, 592, 594, 595, 251, 593, 13: 376, 101: 375, 653},
		{145, 145, 145, 145, 145, 145, 145, 10: 145},
		// 300
		{103: 655},
		{12: 656},
		{251, 251, 251, 251, 251, 251, 251, 592, 594, 595, 251, 593, 13: 376, 101: 375, 657},
		{146, 146, 146, 146, 146, 146, 146, 10: 146},
		{103: 659},
		// 305
		{12: 660},
		{251, 251, 251, 251, 251, 251, 251, 592, 594, 595, 251, 593, 13: 376, 101: 375, 661},
		{147, 147, 147, 147, 147, 147, 147, 10: 147},
		{103: 663},
		{12: 664},
		// 310
		{251, 251, 251, 251, 251, 251, 251, 592, 594, 595, 251, 593, 13: 376, 101: 375, 665},
		{148, 148, 148, 148, 148, 148, 148, 10: 148},
		{103: 667},
		{12: 668},
		{251, 251, 251, 251, 251, 251, 251, 592, 594, 595, 251, 593, 13: 376, 101: 375, 669},
		// 315
		{149, 149, 149, 149, 149, 149, 149, 10: 149},
		{103: 671},
		{12: 672},
		{251, 251, 251, 251, 251, 251, 251, 592, 594, 595, 251, 593, 13: 376, 101: 375, 673},
		{150, 150, 150, 150, 150, 150, 150, 10: 150},
		// 320
		{7: 592, 594, 595, 11: 593, 13: 376, 17: 251, 101: 375, 675, 676},
		{17: 679},
		{12: 677},
		{251, 251, 251, 251, 251, 251, 251, 592, 594, 595, 251, 593, 13: 376, 101: 375, 678},
		{151, 151, 151, 151, 151, 151, 151, 10: 151},
		// 325
		{7: 438, 681, 443, 14: 439, 680, 442, 104: 682},
		{7: 547},
		{7: 542},
		{17: 683},
		{7: 438, 681, 443, 14: 439, 680, 442, 104: 684},
		// 330
		{17: 685},
		{7: 438, 681, 443, 14: 439, 680, 442, 104: 686},
		{169, 169, 169, 169, 169, 169, 169, 10: 169},
		{7: 592, 594, 595, 11: 593, 13: 376, 17: 251, 101: 375, 688, 689},
		{17: 692},
		// 335
		{12: 690},
		{251, 251, 251, 251, 251, 251, 251, 592, 594, 595, 251, 593, 13: 376, 101: 375, 691},
		{152, 152, 152, 152, 152, 152, 152, 10: 152},
		{7: 438, 681, 443, 14: 439, 680, 442, 104: 693},
		{17: 694},
		// 340
		{7: 438, 681, 443, 14: 439, 680, 442, 104: 695},
		{17: 696},
		{7: 438, 681, 443, 14: 439, 680, 442, 104: 697},
		{170, 170, 170, 170, 170, 170, 170, 10: 170},
		{7: 592, 594, 595, 11: 593, 13: 376, 17: 251, 101: 375, 699, 700},
		// 345
		{17: 703},
		{12: 701},
		{251, 251, 251, 251, 251, 251, 251, 592, 594, 595, 251, 593, 13: 376, 101: 375, 702},
		{153, 153, 153, 153, 153, 153, 153, 10: 153},
		{7: 438, 681, 443, 14: 439, 680, 442, 104: 704},
		// 350
		{96, 96, 96, 96, 96, 96, 96, 10: 96, 17: 706, 136: 705},
		{171, 171, 171, 171, 171, 171, 171, 10: 171},
		{7: 438, 681, 443, 14: 439, 680, 442, 104: 707},
		{96, 96, 96, 96, 96, 96, 96, 10: 96, 17: 706, 136: 708},
		{97, 97, 97, 97, 97, 97, 97, 10: 97},
		// 355
		{7: 592, 594, 595, 11: 593, 13: 376, 17: 251, 101: 375, 710, 711},
		{17: 714},
		{12: 712},
		{251, 251, 251, 251, 251, 251, 251, 592, 594, 595, 251, 593, 13: 376, 101: 375, 713},
		{154, 154, 154, 154, 154, 154, 154, 10: 154},
		// 360
		{7: 438, 681, 443, 14: 439, 680, 442, 104: 715},
		{96, 96, 96, 96, 96, 96, 96, 10: 96, 17: 706, 136: 716},
		{172, 172, 172, 172, 172, 172, 172, 10: 172},
		{7: 592, 594, 595, 11: 593, 13: 376, 17: 251, 101: 375, 718, 719},
		{17: 722},
		// 365
		{12: 720},
		{251, 251, 251, 251, 251, 251, 251, 592, 594, 595, 251, 593, 13: 376, 101: 375, 721},
		{155, 155, 155, 155, 155, 155, 155, 10: 155},
		{7: 438, 681, 443, 14: 439, 680, 442, 104: 723},
		{17: 724},
		// 370
		{7: 438, 681, 443, 14: 439, 680, 442, 104: 725},
		{17: 726},
		{7: 438, 681, 443, 14: 439, 680, 442, 104: 727},
		{17: 728},
		{7: 438, 681, 443, 14: 439, 680, 442, 104: 729},
		// 375
		{173, 173, 173, 173, 173, 173, 173, 10: 173},
		{7: 592, 594, 595, 11: 593, 13: 376, 17: 251, 101: 375, 731, 732},
		{17: 735},
		{12: 733},
		{251, 251, 251, 251, 251, 251, 251, 592, 594, 595, 251, 593, 13: 376, 101: 375, 734},
		// 380
		{156, 156, 156, 156, 156, 156, 156, 10: 156},
		{7: 438, 681, 443, 14: 439, 680, 442, 104: 736},
		{17: 737},
		{7: 438, 681, 443, 14: 439, 680, 442, 104: 738},
		{17: 739},
		// 385
		{7: 438, 681, 443, 14: 439, 680, 442, 104: 740},
		{17: 741},
		{7: 438, 681, 443, 14: 439, 680, 442, 104: 742},
		{174, 174, 174, 174, 174, 174, 174, 10: 174},
		{7: 592, 594, 595, 11: 593, 13: 376, 17: 251, 101: 375, 744, 745},
		// 390
		{17: 748},
		{12: 746},
		{251, 251, 251, 251, 251, 251, 251, 592, 594, 595, 251, 593, 13: 376, 101: 375, 747},
		{158, 158, 158, 158, 158, 158, 158, 10: 158},
		{7: 438, 681, 443, 14: 439, 680, 442, 104: 749},
		// 395
		{17: 750},
		{7: 438, 681, 443, 14: 439, 680, 442, 104: 751},
		{175, 175, 175, 175, 175, 175, 175, 10: 175},
		{7: 592, 594, 595, 11: 593, 13: 376, 17: 251, 101: 375, 753, 754},
		{17: 757},
		// 400
		{12: 755},
		{251, 251, 251, 251, 251, 251, 251, 592, 594, 595, 251, 593, 13: 376, 101: 375, 756},
		{157, 157, 157, 157, 157, 157, 157, 10: 157},
		{7: 438, 681, 443, 14: 439, 680, 442, 104: 758},
		{17: 759},
		// 405
		{7: 438, 681, 443, 14: 439, 680, 442, 104: 760},
		{176, 176, 176, 176, 176, 176, 176, 10: 176},
		{7: 592, 594, 595, 11: 593, 13: 376, 17: 251, 101: 375, 762, 763},
		{17: 766},
		{12: 764},
		// 410
		{251, 251, 251, 251, 251, 251, 251, 592, 594, 595, 251, 593, 13: 376, 101: 375, 765},
		{160, 160, 160, 160, 160, 160, 160, 10: 160},
		{7: 438, 681, 443, 14: 439, 680, 442, 104: 767},
		{17: 768},
		{7: 438, 681, 443, 14: 439, 680, 442, 104: 769},
		// 415
		{177, 177, 177, 177, 177, 177, 177, 10: 177},
		{7: 592, 594, 595, 11: 593, 13: 376, 17: 251, 101: 375, 771, 772},
		{17: 775},
		{12: 773},
		{251, 251, 251, 251, 251, 251, 251, 592, 594, 595, 251, 593, 13: 376, 101: 375, 774},
		// 420
		{159, 159, 159, 159, 159, 159, 159, 10: 159},
		{7: 438, 681, 443, 14: 439, 680, 442, 104: 776},
		{17: 777},
		{7: 438, 681, 443, 14: 439, 680, 442, 104: 778},
		{178, 178, 178, 178, 178, 178, 178, 10: 178},
		// 425
		{7: 592, 594, 595, 11: 593, 13: 376, 17: 251, 101: 375, 780, 781},
		{17: 784},
		{12: 782},
		{251, 251, 251, 251, 251, 251, 251, 592, 594, 595, 251, 593, 13: 376, 101: 375, 783},
		{162, 162, 162, 162, 162, 162, 162, 10: 162},
		// 430
		{7: 438, 681, 443, 14: 439, 680, 442, 104: 785},
		{17: 786},
		{7: 438, 681, 443, 14: 439, 680, 442, 104: 787},
		{179, 179, 179, 179, 179, 179, 179, 10: 179},
		{7: 592, 594, 595, 11: 593, 13: 376, 17: 251, 101: 375, 789, 790},
		// 435
		{17: 793},
		{12: 791},
		{251, 251, 251, 251, 251, 251, 251, 592, 594, 595, 251, 593, 13: 376, 101: 375, 792},
		{161, 161, 161, 161, 161, 161, 161, 10: 161},
		{7: 438, 681, 443, 14: 439, 680, 442, 104: 794},
		// 440
		{17: 795},
		{7: 438, 681, 443, 14: 439, 680, 442, 104: 796},
		{180, 180, 180, 180, 180, 180, 180, 10: 180},
		{7: 592, 594, 595, 11: 593, 13: 376, 17: 251, 101: 375, 798, 799},
		{17: 802},
		// 445
		{12: 800},
		{251, 251, 251, 251, 251, 251, 251, 592, 594, 595, 251, 593, 13: 376, 101: 375, 801},
		{164, 164, 164, 164, 164, 164, 164, 10: 164},
		{7: 438, 681, 443, 14: 439, 680, 442, 104: 803},
		{17: 804},
		// 450
		{7: 438, 681, 443, 14: 439, 680, 442, 104: 805},
		{181, 181, 181, 181, 181, 181, 181, 10: 181},
		{7: 592, 594, 595, 11: 593, 13: 376, 17: 251, 101: 375, 807, 808},
		{17: 811},
		{12: 809},
		// 455
		{251, 251, 251, 251, 251, 251, 251, 592, 594, 595, 251, 593, 13: 376, 101: 375, 810},
		{163, 163, 163, 163, 163, 163, 163, 10: 163},
		{7: 438, 681, 443, 14: 439, 680, 442, 104: 812},
		{17: 813},
		{7: 438, 681, 443, 14: 439, 680, 442, 104: 814},
		// 460
		{182, 182, 182, 182, 182, 182, 182, 10: 182},
		{7: 592, 594, 595, 11: 593, 13: 376, 17: 251, 101: 375, 816, 817},
		{17: 820},
		{12: 818},
		{251, 251, 251, 251, 251, 251, 251, 592, 594, 595, 251, 593, 13: 376, 101: 375, 819},
		// 465
		{166, 166, 166, 166, 166, 166, 166, 10: 166},
		{7: 438, 681, 443, 14: 439, 680, 442, 104: 821},
		{183, 183, 183, 183, 183, 183, 183, 10: 183},
		{7: 592, 594, 595, 11: 593, 13: 376, 17: 251, 101: 375, 823, 824},
		{17: 827},
		// 470
		{12: 825},
		{251, 251, 251, 251, 251, 251, 251, 592, 594, 595, 251, 593, 13: 376, 101: 375, 826},
		{165, 165, 165, 165, 165, 165, 165, 10: 165},
		{7: 438, 681, 443, 14: 439, 680, 442, 104: 828},
		{184, 184, 184, 184, 184, 184, 184, 10: 184},
		// 475
		{7: 592, 594, 595, 11: 593, 13: 376, 17: 251, 101: 375, 830, 831},
		{17: 834},
		{12: 832},
		{251, 251, 251, 251, 251, 251, 251, 592, 594, 595, 251, 593, 13: 376, 101: 375, 833},
		{168, 168, 168, 168, 168, 168, 168, 10: 168},
		// 480
		{7: 438, 681, 443, 14: 439, 680, 442, 104: 835},
		{185, 185, 185, 185, 185, 185, 185, 10: 185},
		{7: 592, 594, 595, 11: 593, 13: 376, 17: 251, 101: 375, 837, 838},
		{17: 841},
		{12: 839},
		// 485
		{251, 251, 251, 251, 251, 251, 251, 592, 594, 595, 251, 593, 13: 376, 101: 375, 840},
		{167, 167, 167, 167, 167, 167, 167, 10: 167},
		{7: 438, 681, 443, 14: 439, 680, 442, 104: 842},
		{186, 186, 186, 186, 186, 186, 186, 10: 186},
		{222, 222, 222, 222, 222, 222, 222, 10: 222},
		// 490
		{221, 221, 221, 221, 221, 221, 221, 10: 221},
		{220, 220, 220, 220, 220, 220, 220, 10: 220},
		{219, 219, 219, 219, 219, 219, 219, 10: 219},
		{218, 218, 218, 218, 218, 218, 218, 10: 218},
		{217, 217, 217, 217, 217, 217, 217, 10: 217},
		// 495
		{216, 216, 216, 216, 216, 216, 216, 10: 216},
		{215, 215, 215, 215, 215, 215, 215, 10: 215},
		{214, 214, 214, 214, 214, 214, 214, 10: 214},
		{213, 213, 213, 213, 213, 213, 213, 10: 213},
		{212, 212, 212, 212, 212, 212, 212, 10: 212},
		// 500
		{211, 211, 211, 211, 211, 211, 211, 10: 211},
		{210, 210, 210, 210, 210, 210, 210, 10: 210},
		{209, 209, 209, 209, 209, 209, 209, 10: 209},
		{208, 208, 208, 208, 208, 208, 208, 10: 208},
		{207, 207, 207, 207, 207, 207, 207, 10: 207},
		// 505
		{206, 206, 206, 206, 206, 206, 206, 10: 206},
		{205, 205, 205, 205, 205, 205, 205, 10: 205},
		{204, 204, 204, 204, 204, 204, 204, 10: 204},
		{203, 203, 203, 203, 203, 203, 203, 10: 203},
		{202, 202, 202, 202, 202, 202, 202, 10: 202},
		// 510
		{201, 201, 201, 201, 201, 201, 201, 10: 201},
		{200, 200, 200, 200, 200, 200, 200, 10: 200},
		{199, 199, 199, 199, 199, 199, 199, 10: 199},
		{82: 871, 94: 870, 96: 872},
		{195, 195, 195, 195, 195, 195, 195, 10: 195},
		// 515
		{194, 194, 194, 194, 194, 194, 194, 10: 194},
		{198, 198, 198, 198, 198, 198, 198, 10: 198},
		{197, 197, 197, 197, 197, 197, 197, 10: 197},
		{196, 196, 196, 196, 196, 196, 196, 10: 196},
		{7: 876, 879, 881, 14: 877, 878, 880, 20: 107, 140: 875, 874},
		// 520
		{20: 897},
		{7: 876, 879, 881, 14: 877, 878, 880, 20: 107, 140: 875, 896},
		{7: 106, 106, 106, 14: 106, 106, 106, 20: 106},
		{7: 105, 105, 105, 14: 105, 105, 105, 20: 105},
		{7: 891},
		// 525
		{7: 886},
		{7: 100, 100, 100, 14: 100, 100, 100, 20: 100},
		{7: 882},
		{7: 99, 99, 99, 14: 99, 99, 99, 20: 99, 64: 883},
		{7: 434, 428, 432, 14: 431, 16: 436, 18: 427, 20: 435, 22: 430, 24: 433, 105: 429, 426, 425, 424, 423, 422, 112: 421, 884},
		// 530
		{21: 559, 23: 885},
		{7: 98, 98, 98, 14: 98, 98, 98, 20: 98},
		{8: 887, 15: 888},
		{7: 890},
		{7: 889},
		// 535
		{7: 101, 101, 101, 14: 101, 101, 101, 20: 101},
		{7: 102, 102, 102, 14: 102, 102, 102, 20: 102},
		{8: 893, 15: 892},
		{7: 895},
		{7: 894},
		// 540
		{7: 103, 103, 103, 14: 103, 103, 103, 20: 103},
		{7: 104, 104, 104, 14: 104, 104, 104, 20: 104},
		{20: 108},
		{227, 227, 227, 227, 227, 227, 227, 10: 227},
		{7: 904},
		// 545
		{7: 900},
		{64: 901},
		{7: 434, 428, 432, 14: 431, 16: 436, 18: 427, 20: 435, 22: 430, 24: 433, 105: 429, 426, 425, 424, 423, 422, 112: 421, 902},
		{21: 559, 23: 903},
		{231, 231, 231, 231, 231, 231, 231, 10: 231},
		// 550
		{7: 905},
		{232, 232, 232, 232, 232, 232, 232, 10: 232},
		{234, 234, 234, 234, 234, 234, 234, 10: 234, 14: 907},
		{233, 233, 233, 233, 233, 233, 233, 10: 233},
		{235, 235, 235, 235, 235, 235, 235, 10: 235},
		// 555
		{236, 236, 236, 236, 236, 236, 236, 10: 236},
		{237, 237, 237, 237, 237, 237, 237, 10: 237},
		{238, 238, 238, 238, 238, 238, 238, 10: 238},
		{239, 239, 239, 239, 239, 239, 239, 10: 239},
		{240, 240, 240, 240, 240, 240, 240, 10: 240},
		// 560
		{241, 241, 241, 241, 241, 241, 241, 10: 241},
		{242, 242, 242, 242, 242, 242, 242, 10: 242},
		{243, 243, 243, 243, 243, 243, 243, 10: 243},
		{244, 244, 244, 244, 244, 244, 244, 10: 244},
		{245, 245, 245, 245, 245, 245, 245, 10: 245},
		// 565
		{246, 246, 246, 246, 246, 246, 246, 10: 246},
		{247, 247, 247, 247, 247, 247, 247, 10: 247},
		{248, 248, 248, 248, 248, 248, 248, 10: 248},
		{249, 249, 249, 249, 249, 249, 249, 10: 249},
		{250, 250, 250, 250, 250, 250, 250, 10: 250},
		// 570
		{122, 122, 122, 122, 122, 122, 122, 10: 122, 12: 252, 19: 926, 64: 925},
		{7: 434, 428, 432, 14: 431, 16: 436, 18: 427, 20: 435, 22: 430, 24: 433, 105: 429, 426, 425, 424, 423, 422, 112: 421, 928},
		{7: 434, 428, 432, 14: 431, 16: 436, 18: 427, 20: 435, 22: 430, 24: 433, 105: 429, 426, 425, 424, 423, 422, 112: 421, 927},
		{118, 118, 118, 118, 118, 118, 118, 10: 118, 21: 559},
		{21: 559, 23: 929},
		// 575
		{121, 121, 121, 121, 121, 121, 121, 10: 121, 19: 930, 64: 931},
		{7: 434, 428, 432, 14: 431, 16: 436, 18: 427, 20: 435, 22: 430, 24: 433, 105: 429, 426, 425, 424, 423, 422, 112: 421, 934},
		{7: 434, 428, 432, 14: 431, 16: 436, 18: 427, 20: 435, 22: 430, 24: 433, 105: 429, 426, 425, 424, 423, 422, 112: 421, 932},
		{21: 559, 23: 933},
		{119, 119, 119, 119, 119, 119, 119, 10: 119},
		// 580
		{120, 120, 120, 120, 120, 120, 120, 10: 120, 21: 559},
		{142, 142, 142, 142, 142, 142, 142, 10: 142},
		{12: 943},
		{12: 941},
		{12: 939},
		// 585
		{251, 251, 251, 251, 251, 251, 251, 592, 594, 595, 251, 593, 13: 376, 101: 375, 940},
		{125, 125, 125, 125, 125, 125, 125, 10: 125},
		{251, 251, 251, 251, 251, 251, 251, 592, 594, 595, 251, 593, 13: 376, 101: 375, 942},
		{126, 126, 126, 126, 126, 126, 126, 10: 126},
		{7: 944},
		// 590
		{19: 945},
		{7: 434, 428, 948, 14: 431, 16: 436, 18: 427, 20: 435, 22: 947, 24: 433, 31: 381, 382, 385, 388, 403, 387, 386, 384, 383, 402, 404, 397, 398, 400, 371, 374, 406, 405, 372, 401, 391, 389, 394, 395, 392, 396, 390, 393, 373, 105: 429, 426, 425, 424, 423, 422, 112: 421, 946, 399, 949, 950, 367, 370, 368, 369},
		{127, 127, 127, 127, 127, 127, 127, 10: 127, 21: 559},
		{7: 434, 428, 432, 14: 431, 16: 436, 18: 427, 20: 435, 22: 430, 24: 433, 105: 969, 426, 425, 424, 423, 422, 112: 421, 570, 143: 970},
		{7: 556, 22: 951},
		// 595
		{124, 124, 124, 124, 124, 124, 124, 10: 124},
		{123, 123, 123, 123, 123, 123, 123, 10: 123},
		{7: 592, 379, 595, 11: 593, 251, 376, 15: 954, 19: 415, 31: 381, 382, 385, 388, 403, 387, 386, 384, 383, 402, 404, 397, 398, 400, 371, 374, 406, 405, 372, 401, 391, 389, 394, 395, 392, 396, 390, 393, 373, 416, 101: 375, 414, 114: 399, 953, 952, 367, 370, 368, 369, 958, 955, 957, 959, 956},
		{2: 968},
		{2: 967},
		// 600
		{65: 634, 637, 621, 636, 629, 627, 631, 640, 635, 625, 623, 641, 639, 619, 617, 638, 633, 85: 620, 628, 626, 630, 624, 622, 618, 616, 632, 142: 965},
		{2: 964},
		{2: 963},
		{2: 962},
		{2: 961},
		// 605
		{2: 960},
		{128, 128, 128, 128, 128, 128, 128, 10: 128},
		{129, 129, 129, 129, 129, 129, 129, 10: 129},
		{130, 130, 130, 130, 130, 130, 130, 10: 130},
		{131, 131, 131, 131, 131, 131, 131, 10: 131},
		// 610
		{132, 132, 132, 132, 132, 132, 132, 10: 132},
		{2: 966},
		{133, 133, 133, 133, 133, 133, 133, 10: 133},
		{134, 134, 134, 134, 134, 134, 134, 10: 134},
		{135, 135, 135, 135, 135, 135, 135, 10: 135},
		// 615
		{2: 312, 8: 312, 15: 312, 18: 312, 312, 21: 312, 25: 312, 972, 312, 312, 312, 312, 111: 312},
		{2: 971},
		{136, 136, 136, 136, 136, 136, 136, 10: 136},
		{7: 434, 9: 432, 14: 431, 16: 436, 20: 435, 22: 430, 24: 433, 105: 973, 143: 974},
		{2: 111, 26: 972},
		// 620
		{2: 112},
		{2: 976},
		{83: 977},
		{1: 345, 4: 345, 7: 377, 379, 380, 11: 378, 251, 376, 15: 407, 19: 415, 31: 381, 382, 385, 388, 403, 387, 386, 384, 383, 402, 404, 397, 398, 400, 371, 374, 406, 405, 372, 401, 391, 389, 394, 395, 392, 396, 390, 393, 373, 416, 366, 364, 365, 101: 375, 414, 114: 399, 360, 359, 367, 370, 368, 369, 411, 408, 410, 413, 409, 362, 412, 361, 357, 358, 363, 978},
		{1: 979},
		// 625
		{110, 110, 110, 110, 110, 110, 110, 10: 110},
		{259, 259, 259, 259, 259, 259, 259, 10: 259, 12: 259, 14: 259, 17: 259, 26: 259},
		{292, 292, 292, 292, 292, 292, 292, 10: 292},
		{12: 983},
		{7: 986, 103: 985, 133: 984},
		// 630
		{295, 295, 295, 295, 295, 295, 295, 10: 295},
		{12: 1013, 145: 1014},
		{19: 987},
		{7: 438, 681, 443, 14: 439, 680, 442, 20: 1006, 65: 994, 997, 990, 996, 1001, 993, 1002, 1003, 995, 992, 991, 1004, 1000, 989, 988, 998, 999, 104: 1005, 137: 1007},
		{291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 103: 291},
		// 635
		{290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 103: 290},
		{289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 103: 289},
		{288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 103: 288},
		{287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 103: 287},
		{286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 103: 286},
		// 640
		{285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 103: 285},
		{284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 103: 284},
		{283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 103: 283},
		{282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 103: 282},
		{281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 103: 281},
		// 645
		{280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 103: 280},
		{279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 103: 279},
		{278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 103: 278},
		{277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 103: 277},
		{276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 103: 276},
		// 650
		{275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 103: 275},
		{265, 265, 265, 265, 265, 265, 265, 986, 10: 265, 133: 1012},
		{530, 504, 519, 515, 511, 533, 529, 438, 441, 443, 11: 506, 501, 470, 439, 440, 442, 498, 524, 468, 113, 520, 518, 517, 535, 521, 505, 526, 527, 531, 525, 473, 477, 482, 493, 479, 492, 490, 481, 480, 523, 474, 478, 532, 475, 463, 466, 472, 471, 464, 476, 486, 487, 484, 491, 488, 485, 483, 489, 465, 502, 513, 512, 514, 516, 455, 458, 448, 456, 452, 451, 453, 462, 457, 450, 449, 461, 460, 447, 446, 459, 454, 507, 503, 534, 494, 538, 495, 536, 496, 497, 499, 500, 537, 508, 528, 509, 522, 510, 469, 467, 104: 444, 134: 445, 1009},
		{262, 262, 262, 262, 262, 262, 262, 986, 10: 262, 133: 1008},
		{261, 261, 261, 261, 261, 261, 261, 10: 261},
		// 655
		{20: 1010},
		{263, 263, 263, 263, 263, 263, 263, 986, 10: 263, 133: 1011},
		{264, 264, 264, 264, 264, 264, 264, 10: 264},
		{266, 266, 266, 266, 266, 266, 266, 10: 266},
		{251, 251, 251, 251, 251, 251, 251, 592, 594, 595, 251, 593, 13: 376, 101: 375, 1017},
		// 660
		{12: 1015},
		{251, 251, 251, 251, 251, 251, 251, 592, 594, 595, 251, 593, 13: 376, 101: 375, 1016},
		{293, 293, 293, 293, 293, 293, 293, 10: 293},
		{294, 294, 294, 294, 294, 294, 294, 10: 294},
		{297, 297, 297, 297, 297, 297, 297, 10: 297},
		// 665
		{7: 986, 133: 1020},
		{296, 296, 296, 296, 296, 296, 296, 10: 296},
		{7: 592, 594, 595, 11: 593, 251, 376, 101: 375, 1022, 1023},
		{12: 1026},
		{12: 1024},
		// 670
		{251, 251, 251, 251, 251, 251, 251, 592, 594, 595, 251, 593, 13: 376, 101: 375, 1025},
		{298, 298, 298, 298, 298, 298, 298, 10: 298},
		{7: 986, 133: 1027},
		{299, 299, 299, 299, 299, 299, 299, 10: 299},
		{22: 1056},
		// 675
		{97: 1030},
		{7: 434, 428, 1033, 14: 431, 16: 436, 18: 427, 20: 435, 22: 430, 24: 433, 83: 1032, 105: 429, 426, 425, 424, 423, 422, 112: 421, 1031},
		{4: 1053, 21: 559},
		{14: 1045},
		{7: 556, 22: 1034},
		// 680
		{7: 434, 9: 432, 14: 431, 16: 436, 20: 435, 22: 430, 24: 433, 31: 381, 382, 385, 388, 403, 387, 386, 384, 383, 402, 404, 397, 398, 400, 47: 406, 405, 50: 401, 391, 389, 394, 395, 392, 396, 390, 393, 105: 1036, 114: 399, 1035},
		{2: 1041},
		{2: 1037},
		{84: 1038},
		{345, 4: 345, 7: 377, 379, 380, 11: 378, 251, 376, 15: 407, 19: 415, 31: 381, 382, 385, 388, 403, 387, 386, 384, 383, 402, 404, 397, 398, 400, 371, 374, 406, 405, 372, 401, 391, 389, 394, 395, 392, 396, 390, 393, 373, 416, 366, 364, 365, 101: 375, 414, 114: 399, 360, 359, 367, 370, 368, 369, 411, 408, 410, 413, 409, 362, 412, 361, 357, 358, 363, 1039},
		// 685
		{1040},
		{336, 336, 3: 336, 5: 336, 336, 10: 336},
		{84: 1042},
		{345, 4: 345, 7: 377, 379, 380, 11: 378, 251, 376, 15: 407, 19: 415, 31: 381, 382, 385, 388, 403, 387, 386, 384, 383, 402, 404, 397, 398, 400, 371, 374, 406, 405, 372, 401, 391, 389, 394, 395, 392, 396, 390, 393, 373, 416, 366, 364, 365, 101: 375, 414, 114: 399, 360, 359, 367, 370, 368, 369, 411, 408, 410, 413, 409, 362, 412, 361, 357, 358, 363, 1043},
		{1044},
		// 690
		{337, 337, 3: 337, 5: 337, 337, 10: 337},
		{11: 1046},
		{11: 1047},
		{14: 1048},
		{1: 1049},
		// 695
		{4: 1050},
		{345, 4: 345, 7: 377, 379, 380, 11: 378, 251, 376, 15: 407, 19: 415, 31: 381, 382, 385, 388, 403, 387, 386, 384, 383, 402, 404, 397, 398, 400, 371, 374, 406, 405, 372, 401, 391, 389, 394, 395, 392, 396, 390, 393, 373, 416, 366, 364, 365, 101: 375, 414, 114: 399, 360, 359, 367, 370, 368, 369, 411, 408, 410, 413, 409, 362, 412, 361, 357, 358, 363, 1051},
		{1052},
		{338, 338, 3: 338, 5: 338, 338, 10: 338},
		{345, 4: 345, 7: 377, 379, 380, 11: 378, 251, 376, 15: 407, 19: 415, 31: 381, 382, 385, 388, 403, 387, 386, 384, 383, 402, 404, 397, 398, 400, 371, 374, 406, 405, 372, 401, 391, 389, 394, 395, 392, 396, 390, 393, 373, 416, 366, 364, 365, 101: 375, 414, 114: 399, 360, 359, 367, 370, 368, 369, 411, 408, 410, 413, 409, 362, 412, 361, 357, 358, 363, 1054},
		// 700
		{1055},
		{339, 339, 3: 339, 5: 339, 339, 10: 339},
		{7: 1057},
		{19: 1058},
		{7: 438, 681, 443, 14: 439, 680, 442, 104: 1059},
		// 705
		{4: 1060},
		{7: 434, 428, 432, 14: 431, 16: 436, 18: 427, 20: 435, 22: 430, 24: 433, 105: 429, 426, 425, 424, 423, 422, 112: 421, 1061},
		{4: 1062, 21: 559},
		{2: 345, 7: 377, 379, 380, 11: 378, 251, 376, 15: 407, 19: 415, 31: 381, 382, 385, 388, 403, 387, 386, 384, 383, 402, 404, 397, 398, 400, 371, 374, 406, 405, 372, 401, 391, 389, 394, 395, 392, 396, 390, 393, 373, 416, 101: 375, 414, 114: 399, 360, 359, 367, 370, 368, 369, 411, 408, 410, 413, 409, 362, 412, 361, 1063},
		{2: 1064},
		// 710
		{2: 1065},
		{4: 1066},
		{345, 4: 345, 7: 377, 379, 380, 11: 378, 251, 376, 15: 407, 19: 415, 31: 381, 382, 385, 388, 403, 387, 386, 384, 383, 402, 404, 397, 398, 400, 371, 374, 406, 405, 372, 401, 391, 389, 394, 395, 392, 396, 390, 393, 373, 416, 366, 364, 365, 101: 375, 414, 114: 399, 360, 359, 367, 370, 368, 369, 411, 408, 410, 413, 409, 362, 412, 361, 357, 358, 363, 1067},
		{1068},
		{340, 340, 3: 340, 5: 340, 340, 10: 340},
		// 715
		{7: 434, 428, 432, 14: 431, 16: 436, 18: 427, 20: 435, 22: 430, 24: 433, 105: 429, 426, 425, 424, 423, 422, 112: 421, 1070},
		{2: 1071, 21: 559},
		{345, 4: 345, 7: 377, 379, 380, 11: 378, 251, 376, 15: 407, 19: 415, 31: 381, 382, 385, 388, 403, 387, 386, 384, 383, 402, 404, 397, 398, 400, 371, 374, 406, 405, 372, 401, 391, 389, 394, 395, 392, 396, 390, 393, 373, 416, 366, 364, 365, 101: 375, 414, 114: 399, 360, 359, 367, 370, 368, 369, 411, 408, 410, 413, 409, 362, 412, 361, 357, 358, 363, 1072},
		{1073},
		{341, 341, 3: 341, 5: 341, 341, 10: 341},
		// 720
		{7: 434, 428, 432, 14: 431, 16: 436, 18: 427, 20: 435, 22: 430, 24: 433, 105: 429, 426, 425, 424, 423, 422, 112: 421, 1075},
		{21: 559, 23: 1076},
		{95: 1077},
		{3: 345, 345, 345, 345, 377, 379, 380, 11: 378, 251, 376, 15: 407, 19: 415, 31: 381, 382, 385, 388, 403, 387, 386, 384, 383, 402, 404, 397, 398, 400, 371, 374, 406, 405, 372, 401, 391, 389, 394, 395, 392, 396, 390, 393, 373, 416, 366, 364, 365, 101: 375, 414, 114: 399, 360, 359, 367, 370, 368, 369, 411, 408, 410, 413, 409, 362, 412, 361, 357, 358, 363, 1078},
		{3: 334, 5: 1081, 1079, 138: 1080},
		// 725
		{343, 343, 3: 343, 5: 343, 343, 10: 343},
		{3: 1088},
		{64: 1082},
		{7: 434, 428, 432, 14: 431, 16: 436, 18: 427, 20: 435, 22: 430, 24: 433, 105: 429, 426, 425, 424, 423, 422, 112: 421, 1083},
		{21: 559, 23: 1084},
		// 730
		{95: 1085},
		{3: 345, 345, 345, 7: 377, 379, 380, 11: 378, 251, 376, 15: 407, 19: 415, 31: 381, 382, 385, 388, 403, 387, 386, 384, 383, 402, 404, 397, 398, 400, 371, 374, 406, 405, 372, 401, 391, 389, 394, 395, 392, 396, 390, 393, 373, 416, 366, 364, 365, 101: 375, 414, 114: 399, 360, 359, 367, 370, 368, 369, 411, 408, 410, 413, 409, 362, 412, 361, 357, 358, 363, 1086},
		{3: 334, 5: 1081, 138: 1087},
		{3: 335},
		{4: 345, 6: 345, 377, 379, 380, 11: 378, 251, 376, 15: 407, 19: 415, 31: 381, 382, 385, 388, 403, 387, 386, 384, 383, 402, 404, 397, 398, 400, 371, 374, 406, 405, 372, 401, 391, 389, 394, 395, 392, 396, 390, 393, 373, 416, 366, 364, 365, 101: 375, 414, 114: 399, 360, 359, 367, 370, 368, 369, 411, 408, 410, 413, 409, 362, 412, 361, 357, 358, 363, 1089},
		// 735
		{6: 1090},
		{342, 342, 3: 342, 5: 342, 342, 10: 342},
		{345, 345, 3: 345, 345, 345, 345, 377, 379, 380, 345, 378, 251, 376, 15: 407, 19: 415, 31: 381, 382, 385, 388, 403, 387, 386, 384, 383, 402, 404, 397, 398, 400, 371, 374, 406, 405, 372, 401, 391, 389, 394, 395, 392, 396, 390, 393, 373, 416, 366, 364, 365, 101: 375, 414, 114: 399, 360, 359, 367, 370, 368, 369, 411, 408, 410, 413, 409, 362, 412, 361, 357, 358, 363, 1092},
		{351, 351, 3: 351, 5: 351, 351, 10: 351},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 147

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			println("OGREE: Unrecognised command!")
cmd.WarningLogger.Println("Unknown Command")			/*yylex.Error(msg)*/
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 1:
		{
			root = yyS[yypt-0].node
		}
	case 2:
		{
			yyVAL.node = &ast{BLOCK, []node{yyS[yypt-0].node}}
		}
	case 3:
		{
			yyVAL.node = &ast{BLOCK, []node{yyS[yypt-2].node, yyS[yypt-0].node}}
		}
	case 4:
		{
			yyVAL.node = &ast{IF, []node{yyS[yypt-0].node}}
		}
	case 5:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 6:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 7:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 8:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 9:
		{
			yyVAL.node = nil
		}
	case 10:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 11:
		{
			yyVAL.node = &ifNode{IF, yyS[yypt-4].node, yyS[yypt-1].node, nil, nil}
		}
	case 12:
		{
			yyVAL.node = &ifNode{IF, yyS[yypt-7].node, yyS[yypt-4].node, yyS[yypt-1].node, yyS[yypt-3].elifArr}
		}
	case 13:
		{
			yyVAL.node = &whileNode{WHILE, yyS[yypt-3].node, yyS[yypt-1].node}
		}
	case 14:
		{
			initnd := &assignNode{ASSIGN, yyS[yypt-11].s, dCatchNodePtr}
			yyVAL.node = &forNode{FOR, initnd, yyS[yypt-7].node, yyS[yypt-5].node, yyS[yypt-1].node}
		}
	case 15:
		{
			var incr *arithNode
			var incrAssign *assignNode
			n1 := &numNode{NUM, 0}

			initd := &assignNode{ASSIGN, yyS[yypt-5].s, n1}
			iter := &symbolReferenceNode{REFERENCE, yyS[yypt-5].s, &numNode{NUM, 0}, nil}
			cmp := &comparatorNode{COMPARATOR, "<", iter, yyS[yypt-3].node}
			incr = &arithNode{ARITHMETIC, "+", iter, &numNode{NUM, 1}}
			incrAssign = &assignNode{ASSIGN, iter, incr}
			yyVAL.node = &forNode{FOR, initd, cmp, incrAssign, yyS[yypt-1].node}

		}
	case 16:
		{
			n1 := &numNode{NUM, yyS[yypt-7].n}
			n2 := &numNode{NUM, yyS[yypt-4].n}
			initnd := &assignNode{ASSIGN, yyS[yypt-10].s, n1}
			var cond *comparatorNode
			var incr *arithNode
			var iter *symbolReferenceNode
			var incrAssign *assignNode

			iter = &symbolReferenceNode{NUM, yyS[yypt-10].s, &numNode{NUM, 0}, nil}

			if yyS[yypt-7].n < yyS[yypt-4].n {
				cond = &comparatorNode{COMPARATOR, "<", iter, n2}
				incr = &arithNode{ARITHMETIC, "+", iter, &numNode{NUM, 1}}
				incrAssign = &assignNode{ASSIGN, iter, incr} //Maybe redundant
			} else if yyS[yypt-7].n == yyS[yypt-4].n {

			} else { //$5 > 8
				cond = &comparatorNode{COMPARATOR, ">", iter, n2}
				incr = &arithNode{ARITHMETIC, "-", iter, &numNode{NUM, 1}}
				incrAssign = &assignNode{ASSIGN, iter, incr}
			}
			yyVAL.node = &forNode{FOR, initnd, cond, incrAssign, yyS[yypt-1].node}
		}
	case 17:
		{
			arrNd := yyS[yypt-4].node
			arrRes := arrNd.execute()
			qRes := &assignNode{ASSIGN, "_internalRes", arrRes}
			varIter := &assignNode{ASSIGN, yyS[yypt-8].s,
				&symbolReferenceNode{REFERENCE, "_internalRes", &numNode{NUM, 0}, nil}}
			init := &ast{ASSIGN, []node{qRes, varIter}}

			offset := &symbolReferenceNode{REFERENCE, "_internalIdx", &numNode{NUM, 0}, nil}
			varIterAssign := &assignNode{ASSIGN,
				&symbolReferenceNode{REFERENCE, yyS[yypt-8].s, &numNode{NUM, 0}, nil},
				&symbolReferenceNode{REFERENCE, "_internalRes",
					offset, nil}}

			incr := &ast{ASSIGN, []node{varIterAssign}}
			body := &ast{BLOCK, []node{incr, yyS[yypt-1].node}}
			yyVAL.node = &rangeNode{FOR, init, arrRes, body}
		}
	case 18:
		{
			arrNd := yyS[yypt-4].node
			//This NonTerminal is broken, it is kept
			//here to show that eventuall the feature
			//must be added
			arrRes := arrNd.execute()
			qRes := &assignNode{ASSIGN, "_internalRes", arrRes}
			varIter := &assignNode{ASSIGN, yyS[yypt-8].s,
				&symbolReferenceNode{REFERENCE, "_internalRes", &numNode{NUM, 0}, nil}}
			init := &ast{ASSIGN, []node{qRes, varIter}}

			offset := &symbolReferenceNode{REFERENCE, "_internalIdx", &numNode{NUM, 0}, nil}
			varIterAssign := &assignNode{ASSIGN,
				&symbolReferenceNode{REFERENCE, yyS[yypt-8].s, &numNode{NUM, 0}, nil},
				&symbolReferenceNode{REFERENCE, "_internalRes",
					offset, nil}}

			incr := &ast{ASSIGN, []node{varIterAssign}}
			body := &ast{BLOCK, []node{incr, yyS[yypt-1].node}}
			yyVAL.node = &rangeNode{FOR, init, arrRes, body}
		}
	case 19:
		{
			x := elifNode{IF, yyS[yypt-4].node, yyS[yypt-1].node}
			f := []elifNode{x}
			f = append(f, yyS[yypt-0].elifArr...)
			yyVAL.elifArr = f
		}
	case 20:
		{
			yyVAL.elifArr = nil
		}
	case 24:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 25:
		{
			yyVAL.node = &comparatorNode{COMPARATOR, "==", yyS[yypt-3].node, yyS[yypt-0].node}
		}
	case 26:
		{
			yyVAL.node = &comparatorNode{COMPARATOR, "!=", yyS[yypt-3].node, yyS[yypt-0].node}
		}
	case 27:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 28:
		{
			yyVAL.node = &comparatorNode{COMPARATOR, "<", yyS[yypt-2].node, yyS[yypt-0].node}
		}
	case 29:
		{
			yyVAL.node = &comparatorNode{COMPARATOR, "<=", yyS[yypt-3].node, yyS[yypt-0].node}
		}
	case 30:
		{
			yyVAL.node = &comparatorNode{COMPARATOR, ">=", yyS[yypt-3].node, yyS[yypt-0].node}
		}
	case 31:
		{
			yyVAL.node = &comparatorNode{COMPARATOR, ">", yyS[yypt-2].node, yyS[yypt-0].node}
		}
	case 32:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 33:
		{
			yyVAL.node = &arithNode{ARITHMETIC, "+", yyS[yypt-2].node, yyS[yypt-0].node}
		}
	case 34:
		{
			yyVAL.node = &arithNode{ARITHMETIC, "-", yyS[yypt-2].node, yyS[yypt-0].node}
		}
	case 35:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 36:
		{
			yyVAL.node = &arithNode{ARITHMETIC, "*", yyS[yypt-2].node, yyS[yypt-0].node}
		}
	case 37:
		{
			yyVAL.node = &arithNode{ARITHMETIC, "/", yyS[yypt-2].node, yyS[yypt-0].node}
		}
	case 38:
		{
			yyVAL.node = &arithNode{ARITHMETIC, "%", yyS[yypt-2].node, yyS[yypt-0].node}
		}
	case 39:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 40:
		{
			yyVAL.node = &boolOpNode{BOOLOP, "!", yyS[yypt-0].node}
		}
	case 41:
		{
			left := &numNode{NUM, 0}
			yyVAL.node = &arithNode{ARITHMETIC, "-", left, yyS[yypt-0].node}
		}
	case 42:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 43:
		{
			yyVAL.node = yyS[yypt-1].node
		}
	case 44:
		{
			yyVAL.node = &numNode{NUM, yyS[yypt-0].n}
		}
	case 45:
		{
			yyVAL.node = &symbolReferenceNode{REFERENCE, yyS[yypt-0].s, &numNode{NUM, 0}, nil}
		}
	case 46:
		{
			yyVAL.node = &symbolReferenceNode{REFERENCE, yyS[yypt-3].s, yyS[yypt-1].node, nil}
		}
	case 47:
		{
			x := &symbolReferenceNode{REFERENCE, yyS[yypt-1].s, &numNode{NUM, -1}, nil}
			switch x.execute().(type) {
			case int:
				yyVAL.node = &numNode{NUM, x.execute().(int)}
			default: //Error, the array length is not an int
				println("Error! Single element arrays are not supported")
				yyVAL.node = &numNode{NUM, -1}

			}
		}
	case 48:
		{
			yyVAL.node = &symbolReferenceNode{REFERENCE, yyS[yypt-0].s, &numNode{NUM, 0}, nil}
		}
	case 49:
		{
			yyVAL.node = &strNode{STR, yyS[yypt-1].s}
			SpaceCount.readCtr += 1
		}
	case 50:
		{
			var x bool
			if yyS[yypt-0].s == "false" {
				x = false
			} else {
				x = true
			}
			yyVAL.node = &boolNode{BOOL, x}
		}
	case 51:
		{
			if cmd.State.DebugLvl >= 3 {
				println("@State start")
			}
		}
	case 55:
		{
			cmd.Disp(resMap(&yyS[yypt-0].s, yyS[yypt-3].s, false))
			yyVAL.node = &commonNode{COMMON, cmd.PostObj, "PostObj", []interface{}{cmd.EntityStrToInt(yyS[yypt-3].s), yyS[yypt-3].s, resMap(&yyS[yypt-0].s, yyS[yypt-3].s, false)}}
		}
	case 56:
		{
			yyVAL.node = &commonNode{COMMON, cmd.PostObj, "EasyPost", []interface{}{cmd.EntityStrToInt(yyS[yypt-3].s), yyS[yypt-3].s, yyS[yypt-0].s}}
		}
	case 57:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetObject, "GetObject", []interface{}{yyS[yypt-0].s}}
		}
	case 58:
		{ /*cmd.Disp(resMap(&$4)); */
			yyVAL.node = &commonNode{COMMON, cmd.SearchObjects, "SearchObjects", []interface{}{yyS[yypt-1].s, resMap(&yyS[yypt-0].s, yyS[yypt-1].s, false)}}
		}
	case 59:
		{
			yyVAL.node = &commonNode{COMMON, cmd.UpdateObj, "UpdateObj", []interface{}{yyS[yypt-2].s, resMap(&yyS[yypt-0].s, auxGetNode(yyS[yypt-2].s), true)}}
		}
	case 60:
		{
			yyVAL.node = &commonNode{COMMON, cmd.EasyUpdate, "EasyUpdate", []interface{}{yyS[yypt-4].s, yyS[yypt-0].s, false}}
		}
	case 61:
		{
			yyVAL.node = &commonNode{COMMON, cmd.EasyUpdate, "EasyUpdate", []interface{}{yyS[yypt-5].s, yyS[yypt-0].s, true}}
		}
	case 62:
		{
			if cmd.State.DebugLvl >= 3 {
				println("@State NT_DEL")
			}
			yyVAL.node = &commonNode{COMMON, cmd.DeleteObj, "DeleteObj", []interface{}{yyS[yypt-0].s}}
		}
	case 80:
		{
			yyVAL.s = yyS[yypt-0].s
			dCatchPtr = yyS[yypt-0].s
			dCatchNodePtr = &strNode{STR, yyS[yypt-0].s}
		}
	case 81:
		{
			x := strconv.Itoa(yyS[yypt-0].n)
			yyVAL.s = x
			dCatchPtr = yyS[yypt-0].n
			dCatchNodePtr = &numNode{NUM, yyS[yypt-0].n}
		}
	case 82:
		{
			yyVAL.s = yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s
			dCatchPtr = yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s
			dCatchNodePtr = &strNode{STR, yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s}
		}
	case 83:
		{
			yyVAL.s = yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s
			dCatchPtr = yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s
			dCatchNodePtr = &strNode{STR, yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s}
		}
	case 84:
		{
			yyVAL.s = yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s
			dCatchPtr = yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s
			dCatchNodePtr = &strNode{STR, yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s}
		}
	case 85:
		{
			yyVAL.s = yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s
			dCatchPtr = yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s
			dCatchNodePtr = &strNode{STR, yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s}
		}
	case 86:
		{
			var x bool
			if yyS[yypt-0].s == "false" {
				x = false
			} else {
				x = true
			}
			dCatchPtr = x
			dCatchNodePtr = &boolNode{BOOL, x}
		}
	case 87:
		{
			yyVAL.s = resolveReference(yyS[yypt-0].s)
			/*Probably code to reference SymbolTable and return data*/
			/*idx := dynamicMap[$2];
			  item := dynamicSymbolTable[idx];
			  switch item.(type) {
			         case bool:
			            dCatchNodePtr=&boolNode{BOOL, item.(bool)}
			            if item.(bool) == false {$$ = "false"} else { $$ = "true"}
			         case string:
			            dCatchNodePtr=&strNode{STR, item.(string)}
			            $$ = item.(string)
			         case int:
			            dCatchNodePtr=&numNode{NUM, item.(int)}
			            $$ = strconv.Itoa(item.(int))
			         case *commonNode:
			            dCatchNodePtr=item
			            args := ""
			            for i := range item.(*commonNode).args {
			                   args += item.(*commonNode).args[i].(string)
			            }
			            $$ = item.(*commonNode).val +" "+ args
			          default:
			            println("Unable to deref your variable ")
			            $$ = ""
			  }*/
		}
	case 88:
		{
			yyVAL.s = string(yyS[yypt-3].s + "=" + yyS[yypt-1].s + "=" + yyS[yypt-0].s)
			if cmd.State.DebugLvl >= 3 {
				println("So we got: ", yyVAL.s)
			}
		}
	case 89:
		{
			yyVAL.s = yyS[yypt-2].s + "=" + yyS[yypt-0].s
		}
	case 90:
		{
			yyVAL.s = yyS[yypt-5].s + "=" + yyS[yypt-2].s + "=" + yyS[yypt-0].s
		}
	case 91:
		{
			yyVAL.s = yyS[yypt-4].s + "=" + yyS[yypt-1].s
		}
	case 92:
		{
			yyVAL.s = yyS[yypt-2].s + "=" + yyS[yypt-0].s
		}
	case 93:
		{
			yyVAL.s = string(yyS[yypt-3].s + "=" + yyS[yypt-1].s + "=" + yyS[yypt-0].s)
			if cmd.State.DebugLvl >= 3 {
				println("So we got: ", yyVAL.s)
			}
		}
	case 95:
		{
			yyVAL.s = "/" + yyS[yypt-0].s
		}
	case 96:
		{
			yyVAL.s = yyS[yypt-2].s + "/" + yyS[yypt-0].s
		}
	case 97:
		{
			yyVAL.s = yyS[yypt-0].s
		}
	case 98:
		{
			yyVAL.s = "../" + yyS[yypt-0].s
		}
	case 99:
		{
			yyVAL.s = yyS[yypt-2].s + "." + yyS[yypt-0].s
		}
	case 100:
		{
			yyVAL.s = ".."
		}
	case 101:
		{
			yyVAL.s = "-"
		}
	case 102:
		{
			yyVAL.s = resolveReference(yyS[yypt-0].s)
		}
	case 103:
		{
			yyVAL.s = ""
		}
	case 104:
		{ /*cmd.CD($2);*/
			yyVAL.node = &commonNode{COMMON, cmd.CD, "CD", []interface{}{yyS[yypt-0].s}}
		}
	case 105:
		{ /*cmd.LS($2)*/
			yyVAL.node = &commonNode{COMMON, cmd.LS, "LS", []interface{}{yyS[yypt-0].s}}
		}
	case 106:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 0}}
		}
	case 107:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 1}}
		}
	case 108:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 2}}
		}
	case 109:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 3}}
		}
	case 110:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 4}}
		}
	case 111:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 5}}
		}
	case 112:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 10}}
		}
	case 113:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 11}}
		}
	case 114:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 6}}
		}
	case 115:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 7}}
		}
	case 116:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 8}}
		}
	case 117:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 9}}
		}
	case 118:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 12}}
		}
	case 119:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOBJECT, "LSOBJ", []interface{}{yyS[yypt-0].s, 13}}
		}
	case 120:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Tree, "Tree", []interface{}{yyS[yypt-0].s, 0}}
		}
	case 121:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Tree, "Tree", []interface{}{yyS[yypt-1].s, yyS[yypt-0].n}}
		}
	case 122:
		{
			yyVAL.node = &commonNode{COMMON, UnsetUtil, "Unset", []interface{}{yyS[yypt-2].s + yyS[yypt-1].s, yyS[yypt-0].s, nil, nil}}
		}
	case 123:
		{
			v := &symbolReferenceNode{REFERENCE, yyS[yypt-3].s, yyS[yypt-1].node, nil}
			//$$=&assignNode{ASSIGN, v, "deleteValue"}
			yyVAL.node = &commonNode{COMMON, UnsetUtil, "Unset", []interface{}{"", "", v, nil}}

		}
	case 124:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 125:
		{
			yyVAL.node = &commonNode{COMMON, nil, "CLR", nil}
		}
	case 126:
		{
			yyVAL.node = &commonNode{COMMON, nil, "Grep", nil}
		}
	case 127:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Print, "Print", yyS[yypt-1].arr}
		}
	case 128:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LSOG, "LSOG", nil}
		}
	case 129:
		{
			yyVAL.node = &commonNode{COMMON, cmd.PWD, "PWD", nil}
		}
	case 130:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Exit, "Exit", nil}
		}
	case 131:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{""}}
		}
	case 132:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"ls"}}
		}
	case 133:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"pwd"}}
		}
	case 134:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"print"}}
		}
	case 135:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"cd"}}
		}
	case 136:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"create"}}
		}
	case 137:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"gt"}}
		}
	case 138:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"update"}}
		}
	case 139:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"delete"}}
		}
	case 140:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{yyS[yypt-0].s}}
		}
	case 141:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"tree"}}
		}
	case 142:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"if"}}
		}
	case 143:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"while"}}
		}
	case 144:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"for"}}
		}
	case 145:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"unset"}}
		}
	case 146:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"select"}}
		}
	case 147:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"cmds"}}
		}
	case 148:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"lsog"}}
		}
	case 149:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"lsten"}}
		}
	case 150:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"lssite"}}
		}
	case 151:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"lsbldg"}}
		}
	case 152:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"lsroom"}}
		}
	case 153:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"lsrack"}}
		}
	case 154:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"lsdev"}}
		}
	case 155:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"-"}}
		}
	case 156:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{".template"}}
		}
	case 157:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{".cmds"}}
		}
	case 158:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{".var"}}
		}
	case 159:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"+"}}
		}
	case 160:
		{
			yyVAL.node = &commonNode{COMMON, cmd.Help, "Help", []interface{}{"="}}
		}
	case 161:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 162:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 163:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 164:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 165:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 166:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 167:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 168:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-2].s)), cmd.TENANT, map[string]interface{}{"attributes": map[string]interface{}{"color": yyS[yypt-0].s}}, rlPtr}}
		}
	case 169:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-2].s)), cmd.TENANT, map[string]interface{}{"attributes": map[string]interface{}{"color": yyS[yypt-0].s}}, rlPtr}}
		}
	case 170:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-2].s)), cmd.SITE, map[string]interface{}{"attributes": map[string]interface{}{"orientation": yyS[yypt-0].s}}, rlPtr}}
		}
	case 171:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-2].s)), cmd.SITE, map[string]interface{}{"attributes": map[string]interface{}{"orientation": yyS[yypt-0].s}}, rlPtr}}
		}
	case 172:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-4].s)), cmd.BLDG, map[string]interface{}{"attributes": map[string]interface{}{"posXY": yyS[yypt-2].s, "size": yyS[yypt-0].s}}, rlPtr}}
		}
	case 173:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-4].s)), cmd.BLDG, map[string]interface{}{"attributes": map[string]interface{}{"posXY": yyS[yypt-2].s, "size": yyS[yypt-0].s}}, rlPtr}}
		}
	case 174:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-4].s)), cmd.ROOM, map[string]interface{}{"attributes": map[string]interface{}{"posXY": yyS[yypt-2].s, "size": yyS[yypt-0].s}}, rlPtr}}
		}
	case 175:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-4].s)), cmd.ROOM, map[string]interface{}{"attributes": map[string]interface{}{"posXY": yyS[yypt-2].s, "size": yyS[yypt-0].s}}, rlPtr}}
		}
	case 176:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-4].s)), cmd.RACK, map[string]interface{}{"attributes": map[string]interface{}{"posXY": yyS[yypt-2].s, "size": yyS[yypt-0].s}}, rlPtr}}
		}
	case 177:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-4].s)), cmd.RACK, map[string]interface{}{"attributes": map[string]interface{}{"posXY": yyS[yypt-2].s, "size": yyS[yypt-0].s}}, rlPtr}}
		}
	case 178:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-4].s)), cmd.DEVICE, map[string]interface{}{"attributes": map[string]interface{}{"slot": yyS[yypt-2].s, "sizeUnit": yyS[yypt-0].s}}, rlPtr}}
		}
	case 179:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-4].s)), cmd.DEVICE, map[string]interface{}{"attributes": map[string]interface{}{"slot": yyS[yypt-2].s, "sizeUnit": yyS[yypt-0].s}}, rlPtr}}
		}
	case 180:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-8].s)), cmd.CORIDOR, map[string]interface{}{"name": yyS[yypt-6].s, "leftRack": yyS[yypt-4].s, "rightRack": yyS[yypt-2].s, "temperature": yyS[yypt-0].s}, rlPtr}}
		}
	case 181:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-8].s)), cmd.CORIDOR, map[string]interface{}{"name": yyS[yypt-6].s, "leftRack": yyS[yypt-4].s, "rightRack": yyS[yypt-2].s, "temperature": yyS[yypt-0].s}, rlPtr}}
		}
	case 182:
		{
			x := map[string]interface{}{"name": yyS[yypt-1].s, "racks": yyS[yypt-0].s}
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-3].s)), cmd.GROUP, x, rlPtr}}
		}
	case 183:
		{
			x := map[string]interface{}{"name": yyS[yypt-1].s, "racks": yyS[yypt-0].s}
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-3].s)), cmd.GROUP, x, rlPtr}}
		}
	case 184:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-6].s)), cmd.SEPARATOR, map[string]interface{}{"name": yyS[yypt-4].s, "pos1": yyS[yypt-2].s, "pos2": yyS[yypt-0].s}, rlPtr}}
		}
	case 185:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetOCLIAtrributes, "GetOCAttr", []interface{}{cmd.StrToStack(replaceOCLICurrPath(yyS[yypt-6].s)), cmd.SEPARATOR, map[string]interface{}{"name": yyS[yypt-4].s, "pos1": yyS[yypt-2].s, "pos2": yyS[yypt-0].s}, rlPtr}}
		}
	case 186:
		{
			yyVAL.node = &commonNode{COMMON, cmd.PostObj, "EasyPost", []interface{}{cmd.EntityStrToInt(yyS[yypt-4].s), yyS[yypt-4].s, yyS[yypt-0].s}}
		}
	case 187:
		{
			yyVAL.node = &commonNode{COMMON, cmd.PostObj, "EasyPost", []interface{}{cmd.EntityStrToInt("tenant"), "tenant", yyS[yypt-0].s}}
		}
	case 188:
		{
			yyVAL.node = &commonNode{COMMON, cmd.PostObj, "EasyPost", []interface{}{cmd.EntityStrToInt(yyS[yypt-4].s), yyS[yypt-4].s, yyS[yypt-0].s}}
		}
	case 189:
		{
			yyVAL.node = &commonNode{COMMON, cmd.PostObj, "EasyPost", []interface{}{cmd.EntityStrToInt("site"), "site", yyS[yypt-0].s}}
		}
	case 190:
		{
			yyVAL.node = &commonNode{COMMON, cmd.PostObj, "EasyPost", []interface{}{cmd.EntityStrToInt(yyS[yypt-4].s), yyS[yypt-4].s, yyS[yypt-0].s}}
		}
	case 191:
		{
			yyVAL.node = &commonNode{COMMON, cmd.PostObj, "EasyPost", []interface{}{cmd.EntityStrToInt("building"), "building", yyS[yypt-0].s}}
		}
	case 192:
		{
			yyVAL.node = &commonNode{COMMON, cmd.PostObj, "EasyPost", []interface{}{cmd.EntityStrToInt(yyS[yypt-4].s), yyS[yypt-4].s, yyS[yypt-0].s}}
		}
	case 193:
		{
			yyVAL.node = &commonNode{COMMON, cmd.PostObj, "EasyPost", []interface{}{cmd.EntityStrToInt("room"), "room", yyS[yypt-0].s}}
		}
	case 194:
		{
			yyVAL.node = &commonNode{COMMON, cmd.PostObj, "EasyPost", []interface{}{cmd.EntityStrToInt(yyS[yypt-4].s), yyS[yypt-4].s, yyS[yypt-0].s}}
		}
	case 195:
		{
			yyVAL.node = &commonNode{COMMON, cmd.PostObj, "EasyPost", []interface{}{cmd.EntityStrToInt("rack"), "rack", yyS[yypt-0].s}}
		}
	case 196:
		{
			yyVAL.node = &commonNode{COMMON, cmd.PostObj, "EasyPost", []interface{}{cmd.EntityStrToInt(yyS[yypt-4].s), yyS[yypt-4].s, yyS[yypt-0].s}}
		}
	case 197:
		{
			yyVAL.node = &commonNode{COMMON, cmd.PostObj, "EasyPost", []interface{}{cmd.EntityStrToInt("device"), "device", yyS[yypt-0].s}}
		}
	case 198:
		{
			yyVAL.node = &commonNode{COMMON, cmd.PostObj, "EasyPost", []interface{}{cmd.EntityStrToInt("corridor"), "corridor", yyS[yypt-0].s}}
		}
	case 199:
		{
			yyVAL.node = &commonNode{COMMON, cmd.PostObj, "EasyPost", []interface{}{cmd.EntityStrToInt(yyS[yypt-4].s), yyS[yypt-4].s, yyS[yypt-0].s}}
		}
	case 200:
		{
			yyVAL.node = &commonNode{COMMON, cmd.PostObj, "EasyPost", []interface{}{cmd.EntityStrToInt("group"), "group", yyS[yypt-0].s}}
		}
	case 201:
		{
			yyVAL.node = &commonNode{COMMON, cmd.PostObj, "EasyPost", []interface{}{cmd.EntityStrToInt(yyS[yypt-4].s), yyS[yypt-4].s, yyS[yypt-0].s}}
		}
	case 202:
		{
			yyVAL.node = &commonNode{COMMON, cmd.PostObj, "EasyPost", []interface{}{cmd.EntityStrToInt("separator"), "separator", yyS[yypt-0].s}}
		}
	case 203:
		{
			yyVAL.node = &commonNode{COMMON, cmd.PostObj, "EasyPost", []interface{}{cmd.EntityStrToInt(yyS[yypt-4].s), yyS[yypt-4].s, yyS[yypt-0].s}}
		}
	case 204:
		{
			yyVAL.node = &commonNode{COMMON, cmd.PostObj, "EasyPost", []interface{}{cmd.EntityStrToInt(yyS[yypt-4].s), yyS[yypt-4].s, yyS[yypt-0].s}}
		}
	case 205:
		{
			yyVAL.node = &commonNode{COMMON, cmd.PostObj, "EasyPost", []interface{}{cmd.EntityStrToInt(yyS[yypt-4].s), yyS[yypt-4].s, yyS[yypt-0].s}}
		}
	case 206:
		{
			yyVAL.node = &commonNode{COMMON, cmd.PostObj, "EasyPost", []interface{}{cmd.EntityStrToInt(yyS[yypt-4].s), yyS[yypt-4].s, yyS[yypt-0].s}}
		}
	case 207:
		{
			yyVAL.node = &commonNode{COMMON, cmd.PostObj, "EasyPost", []interface{}{cmd.EntityStrToInt(yyS[yypt-4].s), yyS[yypt-4].s, yyS[yypt-0].s}}
		}
	case 208:
		{
			yyVAL.node = &commonNode{COMMON, cmd.PostObj, "EasyPost", []interface{}{cmd.EntityStrToInt(yyS[yypt-4].s), yyS[yypt-4].s, yyS[yypt-0].s}}
		}
	case 209:
		{
			yyVAL.node = &commonNode{COMMON, cmd.PostObj, "EasyPost", []interface{}{cmd.EntityStrToInt(yyS[yypt-4].s), yyS[yypt-4].s, yyS[yypt-0].s}}
		}
	case 210:
		{
			yyVAL.node = &commonNode{COMMON, cmd.PostObj, "EasyPost", []interface{}{cmd.EntityStrToInt(yyS[yypt-4].s), yyS[yypt-4].s, yyS[yypt-0].s}}
		}
	case 211:
		{
			yyVAL.node = &commonNode{COMMON, cmd.PostObj, "EasyPost", []interface{}{cmd.EntityStrToInt(yyS[yypt-4].s), yyS[yypt-4].s, yyS[yypt-0].s}}
		}
	case 212:
		{
			yyVAL.node = &commonNode{COMMON, cmd.DeleteObj, "DeleteObj", []interface{}{replaceOCLICurrPath(yyS[yypt-0].s)}}
		}
	case 213:
		{
			val := map[string]interface{}{yyS[yypt-2].s: (yyS[yypt-0].node).(node).execute()}
			yyVAL.node = &commonNode{COMMON, cmd.UpdateObj, "UpdateObj", []interface{}{replaceOCLICurrPath(yyS[yypt-4].s), val}}
			if cmd.State.DebugLvl >= 3 {
				println("Attribute Acquired")
			}
		}
	case 214:
		{
			yyVAL.node = &commonNode{COMMON, cmd.GetObject, "GetObject", []interface{}{replaceOCLICurrPath(yyS[yypt-0].s)}}
		}
	case 215:
		{
			x := make([]string, 0)
			x = append(x, formActualPath(yyS[yypt-2].s))
			x = append(x, yyS[yypt-0].sarr...)
			yyVAL.sarr = x
		}
	case 216:
		{
			yyVAL.sarr = []string{formActualPath(yyS[yypt-0].s)}
		}
	case 217:
		{
			yyVAL.node = &commonNode{COMMON, cmd.SetClipBoard, "setCB", []interface{}{&yyS[yypt-1].sarr}}
			println("Selection made!")
		}
	case 218:
		{
			yyVAL.node = &assignNode{ASSIGN, yyS[yypt-4].s, &arrNode{ARRAY, len(yyS[yypt-1].arr), retNodeArray(yyS[yypt-1].arr)}}
		}
	case 219:
		{
			yyVAL.node = &assignNode{ASSIGN, yyS[yypt-5].s, (yyS[yypt-1].node).(node).execute()}
		}
	case 220:
		{
			yyVAL.node = &assignNode{ASSIGN, yyS[yypt-5].s, (yyS[yypt-1].node).(node).execute()}
		}
	case 221:
		{
			yyVAL.node = &assignNode{ASSIGN, yyS[yypt-6].s, (yyS[yypt-1].node).(node).execute()}
		}
	case 222:
		{
			yyVAL.node = &assignNode{ASSIGN, yyS[yypt-5].s, (yyS[yypt-1].node).(node).execute()}
		}
	case 223:
		{
			yyVAL.node = &assignNode{ASSIGN, yyS[yypt-5].s, (yyS[yypt-1].node).(node).execute()}
		}
	case 224:
		{
			yyVAL.node = &assignNode{ASSIGN, yyS[yypt-5].s, (yyS[yypt-1].node).(node).execute()}
		}
	case 225:
		{
			yyVAL.node = &assignNode{ASSIGN, yyS[yypt-5].s, (yyS[yypt-1].node).(node).execute()}
		}
	case 226:
		{
			yyVAL.node = &assignNode{ASSIGN, yyS[yypt-5].s, (yyS[yypt-1].node).(node).execute()}
		}
	case 227:
		{
			yyVAL.node = &assignNode{ASSIGN, yyS[yypt-2].s, (yyS[yypt-0].node).(node).execute()}
		}
	case 228:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LoadFile, "Load", []interface{}{yyS[yypt-0].s}}
		}
	case 229:
		{
			yyVAL.node = &commonNode{COMMON, cmd.LoadFile, "Load", []interface{}{yyS[yypt-0].s}}
		}
	case 230:
		{
			yyVAL.node = &assignNode{ASSIGN, yyS[yypt-2].s, yyS[yypt-0].node}
		}
	case 231:
		{
			yyVAL.node = &assignNode{ASSIGN, yyS[yypt-2].s, yyS[yypt-0].node}
		}
	case 232:
		{
			yyVAL.node = &symbolReferenceNode{REFERENCE, yyS[yypt-0].s, &numNode{NUM, 0}, nil}
		}
	case 233:
		{
			yyVAL.node = &symbolReferenceNode{REFERENCE, yyS[yypt-3].s, yyS[yypt-1].node, nil}
		}
	case 234:
		{
			v := &symbolReferenceNode{REFERENCE, yyS[yypt-5].s, yyS[yypt-3].node, nil}
			yyVAL.node = &assignNode{ASSIGN, v, yyS[yypt-0].node}
		}
	case 235:
		{
			yyVAL.node = &symbolReferenceNode{REFERENCE, yyS[yypt-6].s /*&numNode{NUM,$4}*/, yyS[yypt-4].node /*&strNode{STR, $7}*/, yyS[yypt-1].node}
		}
	case 236:
		{
			n := &symbolReferenceNode{REFERENCE, yyS[yypt-2].s, &numNode{NUM, 0}, nil}
			yyVAL.node = &assignNode{ASSIGN, n, yyS[yypt-0].node}
		}
	case 237:
		{
			yyVAL.node = &commonNode{COMMON, cmd.ShowClipBoard, "select", nil}
		}
	case 238:
		{ /*x := $3+"="+$5;*/
			val := (yyS[yypt-0].node).(node).execute()
			println("Our val:", val)
			x := map[string]interface{}{yyS[yypt-2].s: val}
			yyVAL.node = &commonNode{COMMON, cmd.UpdateSelection, "UpdateSelect", []interface{}{x}}
		}
	case 239:
		{
			println("$1", yyS[yypt-1].s)
			println("SP:", SpaceCount.s[0])
			i := SpaceCount.read(yyS[yypt-1].s, SpaceCount.readCtr).(int)
			println("idx:", i)
			os.Exit(0)
			w := SpaceCount.s[SpaceCount.readCtr][:i+(len(yyS[yypt-1].s))]
			SpaceCount.s[SpaceCount.readCtr] = SpaceCount.s[SpaceCount.readCtr][i+(len(yyS[yypt-1].s)):]
			if yyS[yypt-0].s != "" {
				yyVAL.s = w + yyS[yypt-0].s
			} else {
				yyVAL.s = w
			}
		}
	case 240:
		{
			println("$1", yyS[yypt-1].s)
			println("SP:", SpaceCount.s[0])
			i := SpaceCount.read(yyS[yypt-1].s, SpaceCount.readCtr).(int)
			println("idx:", i)
			os.Exit(0)
			w := SpaceCount.s[SpaceCount.readCtr][:i+(len(yyS[yypt-1].s))]
			SpaceCount.s[SpaceCount.readCtr] = SpaceCount.s[SpaceCount.readCtr][i+(len(yyS[yypt-1].s)):]
			if yyS[yypt-0].s != "" {
				yyVAL.s = w + yyS[yypt-0].s
			} else {
				yyVAL.s = w
			}
		}
	case 241:
		{
			yyVAL.s = ""
		}
	case 242:
		{
			x := []interface{}{yyS[yypt-2].node}
			yyVAL.arr = append(x, yyS[yypt-0].arr...)
		}
	case 243:
		{
			x := []interface{}{yyS[yypt-0].node}
			yyVAL.arr = x
		}
	case 244:
		{
			yyVAL.node = nil
			funcTable[yyS[yypt-5].s] = &funcNode{FUNC, yyS[yypt-1].node}
		}
	case 245:
		{
			x := funcTable[yyS[yypt-0].s]
			if _, ok := x.(node); ok {
				yyVAL.node = x.(node)
			} else {
				yyVAL.node = nil
			}
		}
	case 246:
		{
			if len(yyS[yypt-0].arr) != 0 {
				yyVAL.arr = append(yyS[yypt-1].arr, yyS[yypt-0].arr...)
			} else {
				yyVAL.arr = yyS[yypt-1].arr
			}
		}
	case 247:
		{
			yyVAL.arr = nil
		}
	case 248:
		{
			yyVAL.arr = []interface{}{&strNode{STR, yyS[yypt-0].s}}
			dCatchNodePtr = &strNode{STR, yyS[yypt-0].s}
		}
	case 249:
		{
			yyVAL.arr = []interface{}{&numNode{NUM, yyS[yypt-0].n}}
			dCatchNodePtr = &numNode{NUM, yyS[yypt-0].n}
		}
	case 250:
		{
			yyVAL.arr = []interface{}{strNode{STR, yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s}}
			dCatchNodePtr = &strNode{STR, yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s}
		}
	case 251:
		{
			yyVAL.arr = []interface{}{strNode{STR, yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s}}
			dCatchNodePtr = &strNode{STR, yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s}
		}
	case 252:
		{
			yyVAL.arr = []interface{}{strNode{STR, yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s}}
			dCatchNodePtr = &strNode{STR, yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s}
		}
	case 253:
		{
			yyVAL.arr = []interface{}{strNode{STR, yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s}}
			dCatchNodePtr = &strNode{STR, yyS[yypt-3].s + yyS[yypt-2].s + yyS[yypt-1].s + yyS[yypt-0].s}
		}
	case 254:
		{
			var x bool
			if yyS[yypt-0].s == "true" {
				x = true
			} else {
				x = false
			}
			yyVAL.arr = []interface{}{&boolNode{BOOL, x}}
			dCatchNodePtr = &boolNode{BOOL, x}
		}
	case 255:
		{
			dCatchNodePtr = &symbolReferenceNode{REFERENCE, yyS[yypt-0].s, &numNode{NUM, 0}, nil}
			yyVAL.arr = []interface{}{dCatchNodePtr}
		}
	case 256:
		{
			dCatchNodePtr = &symbolReferenceNode{REFERENCE, yyS[yypt-3].s, yyS[yypt-1].node, nil}
			yyVAL.arr = []interface{}{dCatchNodePtr}
		}
	case 257:
		{
			x := yyS[yypt-1].s
			yyVAL.s = x + "," + yyS[yypt-0].s
		}
	case 258:
		{
			yyVAL.s = ""
		}
	case 259:
		{
			yyVAL.s = yyS[yypt-0].s
		}
	case 260:
		{
			yyVAL.s = yyS[yypt-0].s
		}
	case 261:
		{
			yyVAL.s = yyS[yypt-0].s
		}
	case 262:
		{
			yyVAL.s = yyS[yypt-0].s
		}
	case 263:
		{
			yyVAL.s = yyS[yypt-0].s
		}
	case 264:
		{
			yyVAL.s = yyS[yypt-0].s
		}
	case 265:
		{
			yyVAL.s = yyS[yypt-0].s
		}
	case 266:
		{
			yyVAL.s = yyS[yypt-0].s
		}
	case 267:
		{
			yyVAL.s = yyS[yypt-0].s
		}
	case 268:
		{
			yyVAL.s = yyS[yypt-0].s
		}
	case 269:
		{
			yyVAL.s = yyS[yypt-0].s
		}
	case 270:
		{
			yyVAL.s = yyS[yypt-0].s
		}
	case 271:
		{
			yyVAL.s = yyS[yypt-0].s
		}
	case 272:
		{
			yyVAL.s = yyS[yypt-0].s
		}
	case 273:
		{
			yyVAL.s = yyS[yypt-0].s
		}
	case 274:
		{
			yyVAL.s = yyS[yypt-0].s
		}
	case 275:
		{
			yyVAL.s = yyS[yypt-0].s
		}
	case 276:
		{
			yyVAL.s = yyS[yypt-0].s
		}
	case 277:
		{
			yyVAL.s = yyS[yypt-0].s
		}
	case 278:
		{
			yyVAL.s = "create"
		}
	case 279:
		{
			yyVAL.s = "get"
		}
	case 280:
		{
			yyVAL.s = "update"
		}
	case 281:
		{
			yyVAL.s = "delete"
		}
	case 282:
		{
			yyVAL.s = "search"
		}
	case 283:
		{
			yyVAL.s = "="
		}
	case 284:
		{
			yyVAL.s = "-l"
		}
	case 285:
		{
			yyVAL.s = "/"
		}
	case 286:
		{
			yyVAL.s = "exit"
		}
	case 287:
		{
			yyVAL.s = "man"
		}
	case 288:
		{
			yyVAL.s = "cd"
		}
	case 289:
		{
			yyVAL.s = "pwd"
		}
	case 290:
		{
			yyVAL.s = "clear"
		}
	case 291:
		{
			yyVAL.s = "grep"
		}
	case 292:
		{
			yyVAL.s = "ls"
		}
	case 293:
		{
			yyVAL.s = "tree"
		}
	case 294:
		{
			yyVAL.s = "lsog"
		}
	case 295:
		{
			yyVAL.s = "lsten"
		}
	case 296:
		{
			yyVAL.s = "lssite"
		}
	case 297:
		{
			yyVAL.s = "lsbldg"
		}
	case 298:
		{
			yyVAL.s = "lstile"
		}
	case 299:
		{
			yyVAL.s = "lscab"
		}
	case 300:
		{
			yyVAL.s = "lssensor"
		}
	case 301:
		{
			yyVAL.s = "lsac"
		}
	case 302:
		{
			yyVAL.s = "lsaisle"
		}
	case 303:
		{
			yyVAL.s = "lspanel"
		}
	case 304:
		{
			yyVAL.s = "lsseparator"
		}
	case 305:
		{
			yyVAL.s = "lsroom"
		}
	case 306:
		{
			yyVAL.s = "lscorridor"
		}
	case 307:
		{
			yyVAL.s = "lsrack"
		}
	case 308:
		{
			yyVAL.s = "lsdev"
		}
	case 309:
		{
			yyVAL.s = "bd"
		}
	case 310:
		{
			yyVAL.s = "dv"
		}
	case 311:
		{
			yyVAL.s = "rk"
		}
	case 312:
		{
			yyVAL.s = "ro"
		}
	case 313:
		{
			yyVAL.s = "@"
		}
	case 314:
		{
			yyVAL.s = "si"
		}
	case 315:
		{
			yyVAL.s = "tn"
		}
	case 316:
		{
			yyVAL.s = ":"
		}
	case 317:
		{
			yyVAL.s = "selection"
		}
	case 318:
		{
			yyVAL.s = "{"
		}
	case 319:
		{
			yyVAL.s = "}"
		}
	case 320:
		{
			yyVAL.s = ","
		}
	case 321:
		{
			yyVAL.s = "."
		}
	case 322:
		{
			yyVAL.s = "cmds"
		}
	case 323:
		{
			yyVAL.s = "template"
		}
	case 324:
		{
			yyVAL.s = "var"
		}
	case 325:
		{
			yyVAL.s = "'"
		}
	case 326:
		{
			yyVAL.s = ";"
		}
	case 327:
		{
			yyVAL.s = "if"
		}
	case 328:
		{
			yyVAL.s = "for"
		}
	case 329:
		{
			yyVAL.s = "while"
		}
	case 330:
		{
			yyVAL.s = "else"
		}
	case 331:
		{
			yyVAL.s = "["
		}
	case 332:
		{
			yyVAL.s = "]"
		}
	case 333:
		{
			yyVAL.s = "("
		}
	case 334:
		{
			yyVAL.s = ")"
		}
	case 335:
		{
			yyVAL.s = "||"
		}
	case 336:
		{
			yyVAL.s = "&&"
		}
	case 337:
		{
			yyVAL.s = "in"
		}
	case 338:
		{
			yyVAL.s = "print"
		}
	case 339:
		{
			yyVAL.s = "!"
		}
	case 340:
		{
			yyVAL.s = "*"
		}
	case 341:
		{
			yyVAL.s = ">"
		}
	case 342:
		{
			yyVAL.s = "<"
		}
	case 343:
		{
			yyVAL.s = "then"
		}
	case 344:
		{
			yyVAL.s = "fi"
		}
	case 345:
		{
			yyVAL.s = "done"
		}
	case 346:
		{
			yyVAL.s = "%"
		}
	case 347:
		{
			yyVAL.s = "unset"
		}
	case 348:
		{
			yyVAL.s = "elif"
		}
	case 349:
		{
			yyVAL.s = "do"
		}
	case 350:
		{
			yyVAL.s = "len"
		}
	case 351:
		{
			yyVAL.s = "gr"
		}
	case 352:
		{
			yyVAL.s = ""
		}
	case 353:
		{
			yyVAL.s = "co"
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}
