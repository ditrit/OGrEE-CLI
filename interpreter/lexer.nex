/[ \t]/  { /* Skip blanks and tabs. */ SpaceCount.shift(yylex.Text());}
/create/ {SpaceCount.shift(yylex.Text()); printToks("TOK_CREATE");return TOK_CREATE}
/gt/ { SpaceCount.shift(yylex.Text()); printToks("TOK_GET"); return TOK_GET}
/update/ {SpaceCount.shift(yylex.Text()); printToks("TOK_UPDATE"); return TOK_UPDATE}
/delete/ {SpaceCount.shift(yylex.Text()); printToks("TOK_DELETE"); return TOK_DELETE}
/search/ {SpaceCount.shift(yylex.Text()); printToks("TOK_SEARCH"); return TOK_SEARCH}
/\+/ {SpaceCount.shift(yylex.Text()); printToks("TOK_PLUS");lval.s = yylex.Text(); return TOK_PLUS}
/-/ { SpaceCount.shift(yylex.Text()); printToks("TOK_OCDEL");lval.s = yylex.Text(); return TOK_OCDEL}
/:/ { SpaceCount.shift(yylex.Text()); printToks("TOK_COL"); return TOK_COL}
/@/ { SpaceCount.shift(yylex.Text()); printToks("TOK_ATTRSPEC"); return TOK_ATTRSPEC}
/\$/ {SpaceCount.shift(yylex.Text()); printToks("TOK_DEREF"); return TOK_DEREF}
/'/ {SpaceCount.shift(yylex.Text()); printToks("TOK_APOST"); return TOK_APOST}
/;/ {SpaceCount.shift(yylex.Text()); printToks("TOK_SEMICOL"); return TOK_SEMICOL}
/\[/ { SpaceCount.shift(yylex.Text()); printToks("TOK_LBLOCK"); return TOK_LBLOCK}
/\]/ { SpaceCount.shift(yylex.Text()); printToks("TOK_RBLOCK"); return TOK_RBLOCK}
/\(/ { SpaceCount.shift(yylex.Text()); printToks("TOK_LPAREN"); return TOK_LPAREN}
/\)/ { SpaceCount.shift(yylex.Text()); printToks("TOK_RPAREN"); return TOK_RPAREN}
/||/ { SpaceCount.shift(yylex.Text()); printToks("TOK_OR"); return TOK_OR}
/&&/ { SpaceCount.shift(yylex.Text()); printToks("TOK_AND"); return TOK_AND}
/\!/ { SpaceCount.shift(yylex.Text()); printToks("TOK_NOT"); return TOK_NOT}
/\*/ { SpaceCount.shift(yylex.Text()); printToks("TOK_MULT"); return TOK_MULT}
/%/  {SpaceCount.shift(yylex.Text()); printToks("TOK_MOD"); return TOK_MOD}
/>/ { SpaceCount.shift(yylex.Text()); printToks("TOK_GREATER"); return TOK_GREATER}
/</ { SpaceCount.shift(yylex.Text()); printToks("TOK_LESS"); return TOK_LESS}
/false|true/ { SpaceCount.shift(yylex.Text()); printToks("TOK_BOOL");lval.s = yylex.Text(); return TOK_BOOL}
/if/ { SpaceCount.shift(yylex.Text()); printToks("TOK_IF"); return TOK_IF}
/for/ { SpaceCount.shift(yylex.Text()); printToks("TOK_FOR"); return TOK_FOR}
/in/ { SpaceCount.shift(yylex.Text()); printToks("TOK_IN"); return TOK_IN}
/while/ { SpaceCount.shift(yylex.Text()); printToks("TOK_WHILE"); return TOK_WHILE}
/else/ { SpaceCount.shift(yylex.Text()); printToks("TOK_ELSE"); return TOK_ELSE}
/then/ { SpaceCount.shift(yylex.Text()); printToks("TOK_THEN"); return TOK_THEN}
/fi/ { SpaceCount.shift(yylex.Text()); printToks("TOK_FI"); return TOK_FI}
/elif/ { SpaceCount.shift(yylex.Text()); printToks("TOK_ELIF"); return TOK_ELIF}
/done/ { SpaceCount.shift(yylex.Text()); printToks("TOK_DONE"); return TOK_DONE}
/do/ { SpaceCount.shift(yylex.Text()); printToks("TOK_DO"); return TOK_DO}
/print/ { SpaceCount.shift(yylex.Text()); printToks("TOK_PRNT"); return TOK_PRNT}
/unset/ { SpaceCount.shift(yylex.Text()); printToks("TOK_UNSET"); return TOK_UNSET}
/\"/ { SpaceCount.mark(); printToks("TOK_QUOT"); return TOK_QUOT}

/tn/ { SpaceCount.shift(yylex.Text()); printToks("TOK_OCTENANT");return TOK_OCTENANT}
/si/ { SpaceCount.shift(yylex.Text()); printToks("TOK_OCSITE");return TOK_OCSITE}
/bd/ { SpaceCount.shift(yylex.Text()); printToks("TOK_OCBLDG");return TOK_OCBLDG}
/ro/ { SpaceCount.shift(yylex.Text()); printToks("TOK_OCROOM");return TOK_OCROOM}
/rk/ { SpaceCount.shift(yylex.Text()); printToks("TOK_OCRACK");return TOK_OCRACK}
/dv/ { SpaceCount.shift(yylex.Text()); printToks("TOK_OCDEV");return TOK_OCDEV}
/gr/ { SpaceCount.shift(yylex.Text()); printToks("TOK_OCGROUP");return TOK_OCGROUP}
/sp/ { SpaceCount.shift(yylex.Text()); printToks("TOK_OCWALL");return TOK_OCWALL}
/co/ { SpaceCount.shift(yylex.Text()); printToks("TOK_OCCORIDOR");return TOK_OCCORIDOR}
/selection/ { SpaceCount.shift(yylex.Text()); printToks("TOK_SELECT"); return TOK_SELECT}
/cmds/ { SpaceCount.shift(yylex.Text()); printToks("TOK_CMDS"); return TOK_CMDS}
/template/ { SpaceCount.shift(yylex.Text()); printToks("TOK_TEMPLATE"); return TOK_TEMPLATE}
/var/ { SpaceCount.shift(yylex.Text()); printToks("TOK_VAR");return TOK_VAR}
/{/ { SpaceCount.shift(yylex.Text()); printToks("TOK_LBRAC");return TOK_LBRAC}
/}/ { SpaceCount.shift(yylex.Text()); printToks("TOK_RBRAC");return TOK_RBRAC}
/,/ { SpaceCount.shift(yylex.Text()); printToks("TOK_COMMA"); return TOK_COMMA}
/\./ { SpaceCount.shift(yylex.Text()); printToks("TOK_DOT"); return TOK_DOT}
/usJn/ { SpaceCount.shift(yylex.Text()); printToks("TOK_USE_JSON"); return TOK_USE_JSON}
/partial/ { SpaceCount.shift(yylex.Text()); printToks("TOK_PARTIAL"); return TOK_PARTIAL}

/tenant/ { SpaceCount.shift(yylex.Text()); printToks("TOK_TENANT");lval.s = yylex.Text();return TOK_TENANT}
/site/ { SpaceCount.shift(yylex.Text()); printToks("TOK_SITE");lval.s = yylex.Text();return TOK_SITE}
/bldg|building/ { SpaceCount.shift(yylex.Text()); printToks("TOK_BLDG");lval.s = yylex.Text();return TOK_BLDG}
/room/ { SpaceCount.shift(yylex.Text()); printToks("TOK_ROOM");lval.s = yylex.Text();return TOK_ROOM}
/rack/ { SpaceCount.shift(yylex.Text()); printToks("TOK_RACK");lval.s = yylex.Text();return TOK_RACK}
/device/ { SpaceCount.shift(yylex.Text()); printToks("TOK_DEVICE");lval.s = yylex.Text();return TOK_DEVICE}
/group/ { SpaceCount.shift(yylex.Text()); printToks("TOK_GROUP");lval.s = yylex.Text();return TOK_GROUP}
/corridor/ { SpaceCount.shift(yylex.Text()); printToks("TOK_CORIDOR");lval.s = yylex.Text();return TOK_CORIDOR}
/separator/ { SpaceCount.shift(yylex.Text()); printToks("TOK_WALL");lval.s = yylex.Text();return TOK_WALL}
/ac/ { SpaceCount.shift(yylex.Text()); printToks("TOK_AC");lval.s = yylex.Text();return TOK_AC}
/panel/ { SpaceCount.shift(yylex.Text()); printToks("TOK_PANEL");lval.s = yylex.Text();return TOK_PANEL}
/tile/ { SpaceCount.shift(yylex.Text()); printToks("TOK_TILE");lval.s = yylex.Text();return TOK_TILE}
/aisle/ { SpaceCount.shift(yylex.Text()); printToks("TOK_AISLE");lval.s = yylex.Text();return TOK_AISLE}
/cabinet/ { SpaceCount.shift(yylex.Text()); printToks("TOK_CABINET");lval.s = yylex.Text();return TOK_CABINET}
/sensor/ { SpaceCount.shift(yylex.Text()); printToks("TOK_SENSOR");lval.s = yylex.Text();return TOK_SENSOR}
/room_template/ { SpaceCount.shift(yylex.Text()); printToks("TOK_ROOM_TMPL");lval.s = yylex.Text();return TOK_ROOM_TMPL}
/obj_template/ { SpaceCount.shift(yylex.Text()); printToks("TOK_OBJ_TMPL");lval.s = yylex.Text();return TOK_OBJ_TMPL}

/[0-9]+/ { SpaceCount.shift(yylex.Text()); printToks("TOK_NUM");lval.n = atoi(yylex.Text()); return TOK_NUM}
/lsten/ { SpaceCount.shift(yylex.Text()); printToks("TOK_LSTEN"); return TOK_LSTEN}
/lssite/ { SpaceCount.shift(yylex.Text()); printToks("TOK_LSSITE"); return TOK_LSSITE}
/lsbldg/ { SpaceCount.shift(yylex.Text()); printToks("TOK_LSBLDG"); return TOK_LSBLDG}
/lsroom/ { SpaceCount.shift(yylex.Text()); printToks("TOK_LSROOM"); return TOK_LSROOM}
/lsrack/ { SpaceCount.shift(yylex.Text()); printToks("TOK_LSRACK"); return TOK_LSRACK}
/lsdev/ { SpaceCount.shift(yylex.Text()); printToks("TOK_LSDEV"); return TOK_LSDEV}
/lsaisle/ { SpaceCount.shift(yylex.Text()); printToks("TOK_LSAISLE"); return TOK_LSAISLE}
/lstile/ { SpaceCount.shift(yylex.Text()); printToks("TOK_LSTILE"); return TOK_LSTILE}
/lscabinet/ { SpaceCount.shift(yylex.Text()); printToks("TOK_LSCAB"); return TOK_LSCAB}
/lssensor/ { SpaceCount.shift(yylex.Text()); printToks("TOK_LSSENSOR"); return TOK_LSSENSOR}
/lsac/ { SpaceCount.shift(yylex.Text()); printToks("TOK_LSAC"); return TOK_LSAC}
/lspanel/ { SpaceCount.shift(yylex.Text()); printToks("TOK_LSPANEL"); return TOK_LSPANEL}
/lsseparator/ { SpaceCount.shift(yylex.Text()); printToks("TOK_LSWALL"); return TOK_LSWALL}
/lscorridor/ { SpaceCount.shift(yylex.Text()); printToks("TOK_LSCORRIDOR"); return TOK_LSCORRIDOR}
/tree/ {SpaceCount.shift(yylex.Text()); printToks("TOK_TREE"); return TOK_TREE}
/lsog/ {SpaceCount.shift(yylex.Text()); printToks("TOK_LSOG"); return TOK_LSOG}
/cd/ {SpaceCount.shift(yylex.Text()); printToks("TOK_CD");return TOK_CD}
/pwd/ {SpaceCount.shift(yylex.Text()); printToks("TOK_PWD");return TOK_PWD}
/clear/ {SpaceCount.shift(yylex.Text()); printToks("TOK_CLR");return TOK_CLR}
/grep/ {SpaceCount.shift(yylex.Text()); printToks("TOK_GREP");return TOK_GREP}
/ls/ {SpaceCount.shift(yylex.Text()); printToks("TOK_LS");return TOK_LS}
/exit/ {SpaceCount.shift(yylex.Text()); printToks("TOK_EXIT"); return TOK_EXIT}
/len/ {SpaceCount.shift(yylex.Text()); printToks("TOK_LEN"); return TOK_LEN}
/-l/ {SpaceCount.shift(yylex.Text()); printToks("TOK_CMDFLAG");return TOK_CMDFLAG}
/[=]/ {SpaceCount.shift(yylex.Text()); printToks("TOK_EQUAL");return TOK_EQUAL}
/\// {SpaceCount.shift(yylex.Text()); printToks("TOK_SLASH"); return TOK_SLASH}
/man/ {SpaceCount.shift(yylex.Text()); printToks("TOK_DOC"); return TOK_DOC}
/[A-Za-z0-9_]+/ {SpaceCount.shift(yylex.Text()); printToks("TOK_WORD"); lval.s = yylex.Text(); printCapturedWord(lval.s); return TOK_WORD}
//
package main
import (
	"strconv"
	cmd "cli/controllers"
)
type TOKType int

//ESPACE BLOCK
//The espace block is code meant to help the parser 
//to correctly capture the number of spaces for strings.
//It doesn't make sense for Lex or Parser to manage grammars 
// using Space tokens
//And it didn't make sense to use a second parser (unneccessary)
type espaceCount struct {
	detected bool
	s map[int]string
	counter int
	readCtr int
	//locs map[int]int //Records number of times space counts appeared 
	//counter int	 	//Used for the parser to retrieve space count @ a loc
	//writeCounter int	//Used by Lex to mark space counts at each loc 
}

var SpaceCount espaceCount

//Starts a new space count
//@ next idx of e.locs
func (e *espaceCount) shift(txt string) interface{} {
	//e.count = 0
	if e.detected == true {
		println("WE ALL HERE: ", txt)
		println("CTR:", e.counter)
		//e.s[e.counter] += txt
		(*e).s[e.counter] += txt
	}
	
	return nil
}

func (e *espaceCount) read(word string, idx int) interface{} {
	return strings.Index(e.s[idx], word)
}

func (e *espaceCount) mark() interface{} {

	if e.detected == true {
		e.detected = false
		e.counter += 1
	} else {
		e.detected = true
	}
	return nil
}


func GetEspaces(count int) string {
	if count > 0 {
		return " "+GetEspaces(count - 1)
	} else {
		return ""
	}
}

func (e *espaceCount) init() interface{} {
	e.detected = false
	e.s = make(map[int]string, 10)
	e.counter = 0
	e.readCtr = 0
	return nil
}
//END OF ESPACE BLOCK

func atoi(x string) int {
	v, e := strconv.Atoi(x)
	if e != nil {
		println("STRCONV ERROR!")
		return 0
	}
	return v
}

func printToks(tok string) {
	if cmd.State.DebugLvl >= 2 {
		println("We got ", tok)
	}
}

func printCapturedWord(x string) {
	if cmd.State.DebugLvl >= 2 {
		println("LVAL: ", x)
	}
}